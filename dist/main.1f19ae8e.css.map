{"version":3,"sources":["../node_modules/bourbon/core/bourbon/library/_overflow-wrap.scss","style/_layout.scss","style/_ui.scss","../node_modules/bourbon/core/bourbon/utilities/_directional-property.scss"],"names":[],"mappings":"AAoBA;AAOA;ACvBQ;ACCR;EACC;EACA;EACA;EACA;EACA;;;AAED;EACC;EACA;EACA;EACA;EACA;;;AAGD;EACC;EACA;;;AAGD;EACC;EACA;EACA;EACA;EACA;EACA;;;AAGD;EACC;EACA;EACA;;;AAGD;EACC;EACA;EACA;;;AAED;EACC;;;AAEA;EACC;EACD;EACA;;;ADlCD;EACG;EACA;EACA;EACF,OAXa;EAYb;EACA;EACA,aAlBY;EAmBZ;AAAqB;EACnB;AAAkE;EAClE;AAAqE;EACrE;AAAmE;EACnE;AAAqH;;;AAGxH;EACC;EACA;;;AAID;EACC;EACA;EACA;EACA;EACA;EACA;;;AAED;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EEYG,cAtBO;EFYV;EACA;EACA;EACA;EACA;EACA;EACA","file":"main.1f19ae8e.css","sourceRoot":"../src","sourcesContent":["@charset \"UTF-8\";\n\n/// Outputs the `overflow-wrap` property and its legacy name `word-wrap` to\n/// support browsers that do not yet use `overflow-wrap`.\n///\n/// @argument {string} $wrap [break-word]\n///   Accepted CSS values are `normal`, `break-word`, `inherit`, `initial`,\n///   or `unset`.\n///\n/// @example scss\n///   .wrapper {\n///     @include overflow-wrap;\n///   }\n///\n///   // CSS Output\n///   .wrapper {\n///     word-wrap: break-word;\n///     overflow-wrap: break-word;\n///   }\n\n/* stylelint-disable order/properties-alphabetical-order */\n\n@mixin overflow-wrap($wrap: break-word) {\n  word-wrap: $wrap;\n  overflow-wrap: $wrap;\n}\n\n/* stylelint-enable */\n","//Basic body pluss call ui \n@import'_ui';\n\n//fonts and main colors\n@import url('https://fonts.googleapis.com/css?family=Inconsolata&display=swap');\n\n$custom-font:'Inconsolata', monospace;\n\n//variables to complete\n$bg:white;\n$tnormalcolor:black;\n\n\n\n\n//base  for all the site \n\nhtml, body{\n  \tmargin: 0px;\n  \tpadding: 0px;\n  \toverflow: hidden;\n\tcolor:$tnormalcolor;\n\twidth: 100%;\n\theight: 100%;\n\tfont-family: $custom-font;\n\tbackground: #11e8bb; /* Old browsers */\n  \tbackground: -moz-linear-gradient(top,  #f5f7fa 0%, #c3cfe2 100%); /* FF3.6-15 */\n  \tbackground: -webkit-linear-gradient(top,  #f5f7fa  0%,#c3cfe2 100%); /* Chrome10-25,Safari5.1-6 */\n  \tbackground: linear-gradient(to bottom,  #f5f7fa  0%,#c3cfe2 100%); /* W3C, IE10+, FF16+, Chrome26+, Opera12+, Safari7+ */\n  \tfilter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#f5f7fa', endColorstr='#c3cfe2',GradientType=0 ); /* IE6-9 */\n\n}\ncanvas{\n\tdisplay: block;\n\tz-index:0;\n}\n\n\n#wrapper{\n\tz-index: 1;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: center;\n\tmargin: 1px;\n\tpadding: 5px;\n}\nmain{\n\tposition: absolute;\n\ttop: 25%;\n\tbackground-color: white;\n\ttext-align: center;\n\topacity: 0.7555;\n\tcolor: black;\n\tborder-color:#303030;\n\t@include border-width(0.15em 0.1em 0.5em 0.1em);\n\tborder-style:outset;\n\ttransform-style: preserve-3d;\n\tperspective: 270px;\n\tperspective-origin: top;\n\tz-index: 5;\n\twidth: 700px;\n\theight: 300px;\n}\nnav{\n\t\n}\nfooter{\n\n}","// here goes interface buttons and canvas plus  positions\n// @import '_responsive';\n\n\n\n#contact{\n\ttext-align: center;\n\ttext-justify:inter-word;\n\tpadding:5px;\n\tmargin-left: -40px;\n\theight: 60px;\n}\na{\n\tborder-color:black;\n\tpadding: 7px;\n\tmargin: 4px;\n\ttext-decoration: none;\n\tcolor:black;\n\n}\na:hover{\n\tbackground: #000000;\n\tcolor:white;\n}\n\nbutton{\n\tbackground: none;\n\tborder-color: black;\n\tborder-width: 0.01em;\n\tfont-size: 16px;\n\tpadding: 5px;\n\tmargin-right: 5px;\n}\n\nbutton :active{\n\tbackground: white;\n\tcolor:#303030;\n\topacity: 0.7;\n\n}\nbutton:hover{\n\tbackground: black;\n\tcolor:white;\n\tborder-color:#303030;\n}\nbutton:link{\n\tborder-color:none;\n}\n #q{\n\t background-color: black;\n\tcolor:white;\n\tpadding: 3px;\n}","@charset \"UTF-8\";\n\n/// Builds directional properties by parsing CSS shorthand values. For example,\n/// a value of `10px null` will output top and bottom directional properties,\n/// but the `null` skips left and right from being output.\n///\n/// @argument {string} $property\n///   Base property.\n///\n/// @argument {string} $suffix\n///   Suffix to append. Use `null` to omit.\n///\n/// @argument {list} $values\n///   List of values to set for the property.\n///\n/// @example scss\n///   .element {\n///     @include _directional-property(border, width, null 5px);\n///   }\n///\n///   // CSS Output\n///   .element {\n///     border-right-width: 5px;\n///     border-left-width: 5px;\n///   }\n///\n/// @require {function} _compact-shorthand\n///\n/// @require {function} _contains-falsy\n///\n/// @access private\n\n@mixin _directional-property(\n  $property,\n  $suffix,\n  $values\n) {\n  $top: $property + \"-top\" + if($suffix, \"-#{$suffix}\", \"\");\n  $bottom: $property + \"-bottom\" + if($suffix, \"-#{$suffix}\", \"\");\n  $left: $property + \"-left\" + if($suffix, \"-#{$suffix}\", \"\");\n  $right: $property + \"-right\" + if($suffix, \"-#{$suffix}\", \"\");\n  $all: $property + if($suffix, \"-#{$suffix}\", \"\");\n\n  $values: _compact-shorthand($values);\n\n  @if _contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n}\n"]}