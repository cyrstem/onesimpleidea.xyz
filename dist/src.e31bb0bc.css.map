{"version":3,"sources":["../node_modules/bourbon/core/bourbon/library/_overflow-wrap.scss","style/_layout.scss","style/_ui.scss","../node_modules/bourbon/core/bourbon/library/_position.scss","../node_modules/bourbon-neat/core/neat/mixins/_grid-container.scss","../node_modules/bourbon/core/bourbon/library/_clearfix.scss","../node_modules/bourbon-neat/core/neat/mixins/_grid-column.scss","../node_modules/bourbon/core/bourbon/utilities/_directional-property.scss"],"names":[],"mappings":"AAoBA;AAOA;ACtBQ;ACHR;ECoDE,UDlDiB;ECsDb,KAXM;EAWN,OAXM;EAWN,MAXM;;ACtBV;EACE;EACA;EACA;;ACTF;EACE;EACA;EACA;;AHdF;EACC;EACA;;;AAOH;EIkBE;EACA;EACA,aAJe;EJbhB;EACA;ECiCC,UD/BiB;ECmCb,KAXM;EAWN,OAXM;EAWN,MAXM;EDvBX;EKyCG,cAtBO;ELjBV;EACA;EACA;EACA;EACA;;AELC;EACE;EACA;EACA;;AFGH;EACC;;;AAMF;ECgBE,UDdiB;ECkBb,MAXM;;ACtBV;EACE;EACA;EACA;;AFaH;EKwBG,SAtBO;EDRT;EACA;EACA,aAJe;EJWf;;;AD1BF;EACC;EACE,kBAXC;EMwDA,QAtBO;EAsBP,SAtBO;ENpBR;EACA;EACA;EACA,aAnBU;EAoBZ,OAjBa;EAkBZ;;;AAIF;EACC;EACA;;;AAGD;EACC;EACA","file":"src.e31bb0bc.css","sourceRoot":"../src","sourcesContent":["@charset \"UTF-8\";\n\n/// Outputs the `overflow-wrap` property and its legacy name `word-wrap` to\n/// support browsers that do not yet use `overflow-wrap`.\n///\n/// @argument {string} $wrap [break-word]\n///   Accepted CSS values are `normal`, `break-word`, `inherit`, `initial`,\n///   or `unset`.\n///\n/// @example scss\n///   .wrapper {\n///     @include overflow-wrap;\n///   }\n///\n///   // CSS Output\n///   .wrapper {\n///     word-wrap: break-word;\n///     overflow-wrap: break-word;\n///   }\n\n/* stylelint-disable order/properties-alphabetical-order */\n\n@mixin overflow-wrap($wrap: break-word) {\n  word-wrap: $wrap;\n  overflow-wrap: $wrap;\n}\n\n/* stylelint-enable */\n","//Basic body pluss call ui \n@import'_ui';\n//fonts and main colors  must be type here \n\n// @import url('https://fonts.googleapis.com/css?family=Nanum+Gothic:400,700,800&display=swap');\n@import url('https://fonts.googleapis.com/css?family=Inconsolata&display=swap');\n// $custom-font:'Nanum Gothic'; \n$custom-font:'Inconsolata', monospace;\n//variables to complete\n$bg:white;\n$tnormalcolor:black;\n\n\n\n\n\n//base  for all the site \n\nhtml, body{\n\tz-index:0;\n  \tbackground-color: $bg;\n  \t@include margin(0 0 0 0);\n  \t@include padding(0 0 0 0);\n  \twidth: 100%;\n  \theight: 100%;\n  \toverflow: hidden;\n  \tfont-family: $custom-font;\n\tcolor:$tnormalcolor;\n\t\t-webkit-font-smoothing:antialiased;\n\n}\n\n#app{\n\tz-index:200;\n\tposition: absolute;\n}\n\ncanvas{\n\tdisplay: block;\n\tz-index: 0;\n}","// here goes interface buttons and canvas plus  positions\n\nnav{\n\t@include grid-container;\n\t@include position(absolute,30% 0 null 0);\n\n\t@include clearfix;\n\tul{\n\t\tli{ \n\t\t\tlist-style: none;\n\t\t\ttext-decoration: none;\n\n\t\t}\n\t}\n\t\t\n}\n//nav end---------------------------------\n#about{\n\t@include grid-container;\n\t@include grid-column(5);\n\tcolor: white;\n\ttext-align: left;\n\t // @include border-top-radius(4px);\n\t@include position(absolute,3% 0 null 0);\n\tborder-color:#303030;\n\t@include border-width(0.25em 0.2em 1em 1.5em);\n\tborder-style:outset;\n\ttransform-style: preserve-3d;\n\tperspective: 250px;\n\tperspective-origin: right;\n\tz-index: 200;\n\th1{\n\t\tpadding-left: 23px;\n\t}\n}\n\n\n\n.contact{\n\t@include grid-container;\n\t@include position(relative, null null null 25vh);\n\timg{\n\t\t@include padding(10px 5px 5px 10px);\n\t\t@include grid-column(3);\n\t\twidth: 35px;\n\t}\n}","@charset \"UTF-8\";\n\n/// Provides a concise, one-line method for setting an element’s positioning\n/// properties: `position`, `top`, `right`, `bottom` and `left`. Use a `null`\n/// value to “skip” an edge of the box.\n///\n/// @argument {string} $position\n///   A CSS position value.\n///\n/// @argument {list} $box-edge-values\n///   List of lengths; accepts CSS shorthand.\n///\n/// @example scss\n///   .element {\n///     @include position(relative, 0 null null 10em);\n///   }\n///\n///   // CSS Output\n///   .element {\n///     left: 10em;\n///     position: relative;\n///     top: 0;\n///   }\n///\n/// @example scss\n///   .element {\n///     @include position(absolute, 0);\n///   }\n///\n///   // CSS Output\n///   .element {\n///     position: absolute;\n///     top: 0;\n///     right: 0;\n///     bottom: 0;\n///     left: 0;\n///   }\n///\n/// @require {function} _is-length\n///\n/// @require {function} _unpack-shorthand\n\n@mixin position(\n  $position,\n  $box-edge-values\n) {\n  $box-edge-values: _unpack-shorthand($box-edge-values);\n  $offsets: (\n    top:    nth($box-edge-values, 1),\n    right:  nth($box-edge-values, 2),\n    bottom: nth($box-edge-values, 3),\n    left:   nth($box-edge-values, 4),\n  );\n\n  position: $position;\n\n  @each $offset, $value in $offsets {\n    @if _is-length($value) {\n      #{$offset}: $value;\n    }\n  }\n}\n","@charset \"UTF-8\";\n/// Creates a grid container with clearfix.\n///\n/// @group features\n///\n/// @name Grid container\n///\n/// @example scss\n///   .element {\n///     @include grid-container;\n///   }\n///\n/// @example css\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin grid-container($grid: $neat-grid) {\n  @if $grid != $neat-grid {\n    @warn \"`grid-container` does not use grid properties. \" +\n          \"Custom grids do not need to be passed in to this mixin.\";\n  }\n\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","@charset \"UTF-8\";\n\n/// Provides an easy way to include a clearfix for containing floats.\n///\n/// @link https://goo.gl/yP5hiZ\n///\n/// @example scss\n///   .element {\n///     @include clearfix;\n///   }\n///\n///   // CSS Output\n///   .element::after {\n///     clear: both;\n///     content: \"\";\n///     display: block;\n///   }\n\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: \"\";\n    display: block;\n  }\n}\n","@charset \"UTF-8\";\n/// Creates a grid column of requested size.\n///\n/// @group features\n///\n/// @name Grid column\n///\n/// @argument {number (unitless)} $columns [null]\n///   Specifies the number of columns an element should span based on the total\n///   columns of the grid.\n///\n///   This can also be defined in a shorthand syntax which also contains the\n///   total column count such as `3 of 5`.\n///\n/// @argument {map} $grid [$neat-grid]\n///   The grid to be used to generate the column.\n///   By default, the global `$neat-grid` will be used.\n///\n/// @example scss\n///   .element {\n///     @include grid-column(3);\n///   }\n///\n/// @example css\n///   .element {\n///     width: calc(25% - 25px);\n///     float: left;\n///     margin-left: 20px;\n///   }\n\n@mixin grid-column($columns: null, $grid: $neat-grid) {\n  $columns: _neat-column-default($grid, $columns);\n  $_grid-columns: _retrieve-neat-setting($grid, columns);\n  $_grid-gutter: _retrieve-neat-setting($grid, gutter);\n\n  width: calc(#{_neat-column-width($grid, $columns)});\n  float: _neat-float-direction($grid);\n  margin-#{_neat-float-direction($grid)}: $_grid-gutter;\n}\n","@charset \"UTF-8\";\n\n/// Builds directional properties by parsing CSS shorthand values. For example,\n/// a value of `10px null` will output top and bottom directional properties,\n/// but the `null` skips left and right from being output.\n///\n/// @argument {string} $property\n///   Base property.\n///\n/// @argument {string} $suffix\n///   Suffix to append. Use `null` to omit.\n///\n/// @argument {list} $values\n///   List of values to set for the property.\n///\n/// @example scss\n///   .element {\n///     @include _directional-property(border, width, null 5px);\n///   }\n///\n///   // CSS Output\n///   .element {\n///     border-right-width: 5px;\n///     border-left-width: 5px;\n///   }\n///\n/// @require {function} _compact-shorthand\n///\n/// @require {function} _contains-falsy\n///\n/// @access private\n\n@mixin _directional-property(\n  $property,\n  $suffix,\n  $values\n) {\n  $top: $property + \"-top\" + if($suffix, \"-#{$suffix}\", \"\");\n  $bottom: $property + \"-bottom\" + if($suffix, \"-#{$suffix}\", \"\");\n  $left: $property + \"-left\" + if($suffix, \"-#{$suffix}\", \"\");\n  $right: $property + \"-right\" + if($suffix, \"-#{$suffix}\", \"\");\n  $all: $property + if($suffix, \"-#{$suffix}\", \"\");\n\n  $values: _compact-shorthand($values);\n\n  @if _contains-falsy($values) {\n    @if nth($values, 1) { #{$top}: nth($values, 1); }\n\n    @if length($values) == 1 {\n      @if nth($values, 1) { #{$right}: nth($values, 1); }\n    } @else {\n      @if nth($values, 2) { #{$right}: nth($values, 2); }\n    }\n\n    @if length($values) == 2 {\n      @if nth($values, 1) { #{$bottom}: nth($values, 1); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 3 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 2) { #{$left}: nth($values, 2); }\n    } @else if length($values) == 4 {\n      @if nth($values, 3) { #{$bottom}: nth($values, 3); }\n      @if nth($values, 4) { #{$left}: nth($values, 4); }\n    }\n  } @else {\n    #{$all}: $values;\n  }\n}\n"]}