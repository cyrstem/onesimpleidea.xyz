{"version":3,"file":"index.25f7901c.js","sources":["../../vite/modulepreload-polyfill","../../src/js/interface/Nav.js","../../src/js/interface/Contact.js","../../src/js/pages/Home.js","../../src/js/pages/Portafolio.js","../../src/js/pages/Experiments.js","../../src/js/app.js","../../node_modules/ogl/src/math/functions/Vec3Func.js","../../node_modules/ogl/src/math/Vec3.js","../../node_modules/ogl/src/core/Geometry.js","../../node_modules/ogl/src/core/Program.js","../../node_modules/ogl/src/core/Renderer.js","../../node_modules/ogl/src/math/functions/Vec4Func.js","../../node_modules/ogl/src/math/functions/QuatFunc.js","../../node_modules/ogl/src/math/Quat.js","../../node_modules/ogl/src/math/functions/Mat4Func.js","../../node_modules/ogl/src/math/Mat4.js","../../node_modules/ogl/src/math/functions/EulerFunc.js","../../node_modules/ogl/src/math/Euler.js","../../node_modules/ogl/src/core/Transform.js","../../node_modules/ogl/src/core/Camera.js","../../node_modules/ogl/src/math/functions/Mat3Func.js","../../node_modules/ogl/src/math/Mat3.js","../../node_modules/ogl/src/core/Mesh.js","../../node_modules/ogl/src/extras/Plane.js","../../node_modules/ogl/src/extras/Box.js","../../src/js/Stage.js","../../src/main.js"],"sourcesContent":["const p = function polyfill() {\n    const relList = document.createElement('link').relList;\n    if (relList && relList.supports && relList.supports('modulepreload')) {\n        return;\n    }\n    for (const link of document.querySelectorAll('link[rel=\"modulepreload\"]')) {\n        processPreload(link);\n    }\n    new MutationObserver((mutations) => {\n        for (const mutation of mutations) {\n            if (mutation.type !== 'childList') {\n                continue;\n            }\n            for (const node of mutation.addedNodes) {\n                if (node.tagName === 'LINK' && node.rel === 'modulepreload')\n                    processPreload(node);\n            }\n        }\n    }).observe(document, { childList: true, subtree: true });\n    function getFetchOpts(script) {\n        const fetchOpts = {};\n        if (script.integrity)\n            fetchOpts.integrity = script.integrity;\n        if (script.referrerpolicy)\n            fetchOpts.referrerPolicy = script.referrerpolicy;\n        if (script.crossorigin === 'use-credentials')\n            fetchOpts.credentials = 'include';\n        else if (script.crossorigin === 'anonymous')\n            fetchOpts.credentials = 'omit';\n        else\n            fetchOpts.credentials = 'same-origin';\n        return fetchOpts;\n    }\n    function processPreload(link) {\n        if (link.ep)\n            // ep marker = processed\n            return;\n        link.ep = true;\n        // prepopulate the load record\n        const fetchOpts = getFetchOpts(link);\n        fetch(link.href, fetchOpts);\n    }\n};__VITE_IS_MODERN__&&p();","const Navbar =()=>{\n    const template = `\n        <nav>\n            <button id=\"home\">About Me </button>\n            <button id=\"experiment\">Experiments</button> \n        </nav>\n       \n    `;\n    return template;\n}\nexport default Navbar;\n","const Contact = () => {\n\n\tconst template = `\n\n        <ul id=\"links\">\n            <a href =\"https://www.instagram.com/cyrstem/\"target=\"_blank\"><img src=\"insta.png\"></a>\n                <a href =\"http://ec.linkedin.com/in/jacobohz\" target=\"_blank\"><img src=\"in.png\"></a>\n            <a href =\"https://github.com/cyrstem/\" target=\"_blank\"><img src=\"git.png\"></a>\n        </ul>\n    `;\n\treturn template;\n    \n};\nexport default Contact;\n","const Home = () => {\n    const template = `\n    <main>\n        <div id=\"content\">\n            <p>Hello...</p>\n            <p>I'm <b>Jacob</b> a <b>Creative Developer</b> and <b>Front-End Developer</b> based in Quito - Ecuador, specialize on building custom digital or physical experiences.</p> \n            <p><b>Self-taught</b> developer, <b>fast learner</b> that works with<b> WebGL, JS, C++, OpenGL, GLSL </b>and recently curious about <b>Machine Learning.</b></p>\n            <div id =\"sites\"> \n            <p> I have worked for:</p>\n            <ul>\n            <li>\n             <a href=\"https://activetheory.net/\" target=\"_blank\">\n               <span>Active Theory</span> \n               <span>WebGL Developer</span>\n               <span>2021</span>\n             </a>\n            </li>\n            <li>\n               <a href=\"https://myuniguru.com/\" target=\"_blank\">\n                 <span>My Uniguru</span>\n                 <span>FullStack Developer</span>\n                 <span class=\"number\">2020</span>\n               </a>\n             </li>\n             <li>\n             <a href=\"https://smartco.com.ec\" target=\"_blank\"> \n               <span>Smartco </span>\n               <span>Unity Developer</span>\n               <span class=\"number\">2019 - 2020</span>\n             </a>\n           </li>\n             <li>\n               <a href=\"https://www.yaesta.com\" target=\"_blank\">\n                 <span> YaEsta </span>\n                 <span> Front-end  & Designer</span> \n                 <span class=\"number\">2016 - 2018</span>\n               </a>\n             </li>\n            </ul>\n         </div>\n         <p>Contact me at <b>cyrstem[at]gmail[dot]com</b></p>  \n        </div>\n    </main>\n    `;\n    return template;\n};\nexport default Home;\n","const Portafolio = () => {\n  const template = `\n      <div class =\"sites\"> \n         <ul>\n         <li>\n          <a href=\"https://activetheory.net/\" target=\"_blank\">\n            <span>Active Theory</span> \n            <span>WebGL Developer</span>\n            <span>2021</span>\n          </a>\n         </li>\n         <li>\n            <a href=\"https://myuniguru.com/\" target=\"_blank\">\n              <span>My Uniguru</span>\n              <span>FullStack Developer</span>\n              <span class=\"number\">2020</span>\n            </a>\n          </li>\n          <li>\n          <a href=\"https://smartco.com.ec\" target=\"_blank\"> \n            <span>Smartco </span>\n            <span>Unity Developer</span>\n            <span class=\"number\">2019 - 2020</span>\n          </a>\n        </li>\n          <li>\n            <a href=\"https://www.yaesta.com\" target=\"_blank\">\n              <span> YaEsta </span>\n              <span> Front-end  & Designer</span> \n              <span class=\"number\">2016 - 2018</span>\n            </a>\n          </li>\n          \n      \n          <li>\n            <a href=\"https://www.pachamama.org.ec/en/\" target=\"_blank\">\n              <span> Pachamama</span>\n              <span> Front-end Developer</span>\n              <span class=\"number\">2010 â€“ 2013</span>\n            </a>\n          </li>\n         </ul>\n      </div>\n    `;\n  return template;\n};\n\nexport default Portafolio;\n","\n// import data from '../../data.json';\n\n// import images from '../images.js'\n// console.log(data.projects[0])\n\n// console.log(images)\n\n\n\nconst Experiments = () => {\n\tconst template = `\n<main>\n   <div id=\"portafolio\">\n    <section class=\"proj\">\n        <a href=\"https://movingphoton.friendred.studio/\" target=\"_blank\"> <img src=\"poster4.jpg\" width=\"500\" /></a>\n    </section>\n    <section class=\"info\">\n        <h2>Moving Photon</h2>\n        <p>I Help develop and deploy the Virtual Experience for\n            <a href=\"https://friendred.studio/2021/10/07/moving-photon/\" target=\"_blank\"> Moving Photon</a> an\n            interactive installation/performance\n            created by installation artist<a href=\"https://friendred.studio\" target=\"_blank\"> Friendred Peng.</a>\n            Participation in Moving Photon can be in 5 different ways, including a Phantom performance,\n            interactive installation, interactive performance,interactive performance with EEG and a <a\n                href=\"https://movingphoton.friendred.studio/\" target=\"_blank\"> remote performance.</a>\n    </section>\n    <section class=\"info\">\n    <h2>Glitch Machine</h2>\n        <p>A custom Glitch App build for<a href=\"https://www.instagram.com/jenna___marsh/ target=\"_blank\"> Jenna Marsh </a>, it lets you play with a image applying different filters and export the resulting image for printing</p>\n    </section>\n    <section class=\"proj\">\n        <a href=\"https://www.instagram.com/p/CNRC1QZHf66/\"> <img src= \"insta-0.jpg\" width=\"500\"/></a>\n     </section>\n     <section class=\"proj\">\n       <a href=\"https://onesimpleidea.itch.io/noizu\" target=\"_blank\"><img src= \"noizu.png\" width=\"500\"/></a>\n    </section>\n    <section class=\"info\">\n    <h2>Noizu</h2>\n        <p>Custom build a Audio player for Linux and mac. on building a light and simple player for linux, based on my old love to sonique and winamp i do miss those programs when ui and ux was actually interesting and different every time this is a preview</p>\n     </section>\n     <section class=\"info\">\n     <h2>PACMan YaEsta.com</h2>\n     <p>Develop a Physical installation with Mapping and live interaction  for the launch of the e-commerce site YaEsta.com back in the day</p>\n      </section>\n    <section class=\"proj\">\n       <a href=\"https://www.youtube.com/watch?v=YHZd0TxPMkY\"> <img src= \"insta-3.jpg\" width=\"500\"/></a>  \n    </section>\n   \n</div>\n</main>\n    `;\n\treturn template;\n};\n\nexport default Experiments;\n","import Navbar from \"./interface/Nav\";\nimport Contact from \"./interface/Contact\";\nimport Home from \"./pages/Home\";\nimport Portafolio from \"./pages/Portafolio\";\nimport Experiments from \"./pages/Experiments\";\n\n\n\nlet stage = null\nexport default class GUIView{\n    constructor(){}\n\n    init(){\n        this.load();\n        this.addListeners();\n        this.simpleSign();\n        \n        //this.responsive();\n    }\n    load(){\n        \t//load UI and socials media  plus main content\n        document.getElementById(\"ui\").innerHTML = Navbar();\n        document.getElementById(\"container\").innerHTML = Home();\n        document.getElementById(\"contact\").innerHTML = Contact();\n\n    }\n    addListeners(){\n        window.addEventListener(\"click\", (event) => {\n            let links = event.target.id;\n           \n            switch (links) {\n                case 'home':\n                    document.getElementById(\"container\").innerHTML = Home();\n                     stage = new Stage({scene:\"sectionA\",active:true})\n                    break;\n                case 'experiment':\n                    document.getElementById(\"container\").innerHTML = Experiments();\n                    stage = new Stage({scene:\"sectionB\",active:false})\n                    break;\n                case 'project':\n                    document.getElementById(\"container\").innerHTML = Portafolio();\n                    stage = new Stage({scene:\"sectionC\",active:true})\n                    break;\n            }\n        \n        }, false);\n        \n    }\n    responsive(){\n        \t//responsive screens\n        var x = window.matchMedia(\"(max-width: 700px)\");\n        if (x.matches) {\n            //console.log(\"responsive biatch\");\n            document.addEventListener(\"click\", function (event) {\n                if (event.target.id !== \"experiment\") return;\n                document.getElementById(\"container\").innerHTML = Experiments();\n                document.getElementById(\"ui\").style.top = \"10vh\";\n            });\n        }\n    }\n\n    simpleSign(){\n        if (window.navigator.userAgent.toLowerCase().indexOf(\"chrome\") > -1) {\n            const args = [\n                \"\\n %c ->> created by cyrstem more info on onesimpleidea.xyz\\n\",\n                \"border: 1px solid #000;color: #fff; background: #171717; padding:5px 0;\",\n            ];\n            window.console.log.apply(console, args);\n        } else if (window.console) {\n            window.console.log(\"-created by cyrstem  -\");\n        }\n    }\n}","const EPSILON = 0.000001;\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nexport function set(out, x, y, z) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function multiply(out, a, b) {\n    out[0] = a[0] * b[0];\n    out[1] = a[1] * b[1];\n    out[2] = a[2] * b[2];\n    return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function divide(out, a, b) {\n    out[0] = a[0] / b[0];\n    out[1] = a[1] / b[1];\n    out[2] = a[2] / b[2];\n    return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nexport function distance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return Math.sqrt(x * x + y * y + z * z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nexport function squaredDistance(a, b) {\n    let x = b[0] - a[0];\n    let y = b[1] - a[1];\n    let z = b[2] - a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nexport function squaredLength(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    return x * x + y * y + z * z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nexport function negate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nexport function inverse(out, a) {\n    out[0] = 1.0 / a[0];\n    out[1] = 1.0 / a[1];\n    out[2] = 1.0 / a[2];\n    return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let len = x * x + y * y + z * z;\n    if (len > 0) {\n        //TODO: evaluate use of glm_invsqrt here?\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nexport function cross(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2];\n\n    out[0] = ay * bz - az * by;\n    out[1] = az * bx - ax * bz;\n    out[2] = ax * by - ay * bx;\n    return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n    return out;\n}\n\n/**\n * Same as above but doesn't apply translation.\n * Useful for rays.\n */\nexport function scaleRotateMat4(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let w = m[3] * x + m[7] * y + m[11] * z + m[15];\n    w = w || 1.0;\n    out[0] = (m[0] * x + m[4] * y + m[8] * z) / w;\n    out[1] = (m[1] * x + m[5] * y + m[9] * z) / w;\n    out[2] = (m[2] * x + m[6] * y + m[10] * z) / w;\n    return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nexport function transformMat3(out, a, m) {\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    out[0] = x * m[0] + y * m[3] + z * m[6];\n    out[1] = x * m[1] + y * m[4] + z * m[7];\n    out[2] = x * m[2] + y * m[5] + z * m[8];\n    return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nexport function transformQuat(out, a, q) {\n    // benchmarks: https://jsperf.com/quaternion-transform-vec3-implementations-fixed\n\n    let x = a[0],\n        y = a[1],\n        z = a[2];\n    let qx = q[0],\n        qy = q[1],\n        qz = q[2],\n        qw = q[3];\n\n    let uvx = qy * z - qz * y;\n    let uvy = qz * x - qx * z;\n    let uvz = qx * y - qy * x;\n\n    let uuvx = qy * uvz - qz * uvy;\n    let uuvy = qz * uvx - qx * uvz;\n    let uuvz = qx * uvy - qy * uvx;\n\n    let w2 = qw * 2;\n    uvx *= w2;\n    uvy *= w2;\n    uvz *= w2;\n\n    uuvx *= 2;\n    uuvy *= 2;\n    uuvz *= 2;\n\n    out[0] = x + uvx + uuvx;\n    out[1] = y + uvy + uuvy;\n    out[2] = z + uvz + uuvz;\n    return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nexport const angle = (function () {\n    const tempA = [0, 0, 0];\n    const tempB = [0, 0, 0];\n\n    return function (a, b) {\n        copy(tempA, a);\n        copy(tempB, b);\n\n        normalize(tempA, tempA);\n        normalize(tempB, tempB);\n\n        let cosine = dot(tempA, tempB);\n\n        if (cosine > 1.0) {\n            return 0;\n        } else if (cosine < -1.0) {\n            return Math.PI;\n        } else {\n            return Math.acos(cosine);\n        }\n    };\n})();\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n","import * as Vec3Func from './functions/Vec3Func.js';\n\nexport class Vec3 extends Array {\n    constructor(x = 0, y = x, z = x) {\n        super(x, y, z);\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n    }\n\n    set y(v) {\n        this[1] = v;\n    }\n\n    set z(v) {\n        this[2] = v;\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        Vec3Func.set(this, x, y, z);\n        return this;\n    }\n\n    copy(v) {\n        Vec3Func.copy(this, v);\n        return this;\n    }\n\n    add(va, vb) {\n        if (vb) Vec3Func.add(this, va, vb);\n        else Vec3Func.add(this, this, va);\n        return this;\n    }\n\n    sub(va, vb) {\n        if (vb) Vec3Func.subtract(this, va, vb);\n        else Vec3Func.subtract(this, this, va);\n        return this;\n    }\n\n    multiply(v) {\n        if (v.length) Vec3Func.multiply(this, this, v);\n        else Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    divide(v) {\n        if (v.length) Vec3Func.divide(this, this, v);\n        else Vec3Func.scale(this, this, 1 / v);\n        return this;\n    }\n\n    inverse(v = this) {\n        Vec3Func.inverse(this, v);\n        return this;\n    }\n\n    // Can't use 'length' as Array.prototype uses it\n    len() {\n        return Vec3Func.length(this);\n    }\n\n    distance(v) {\n        if (v) return Vec3Func.distance(this, v);\n        else return Vec3Func.length(this);\n    }\n\n    squaredLen() {\n        return Vec3Func.squaredLength(this);\n    }\n\n    squaredDistance(v) {\n        if (v) return Vec3Func.squaredDistance(this, v);\n        else return Vec3Func.squaredLength(this);\n    }\n\n    negate(v = this) {\n        Vec3Func.negate(this, v);\n        return this;\n    }\n\n    cross(va, vb) {\n        if (vb) Vec3Func.cross(this, va, vb);\n        else Vec3Func.cross(this, this, va);\n        return this;\n    }\n\n    scale(v) {\n        Vec3Func.scale(this, this, v);\n        return this;\n    }\n\n    normalize() {\n        Vec3Func.normalize(this, this);\n        return this;\n    }\n\n    dot(v) {\n        return Vec3Func.dot(this, v);\n    }\n\n    equals(v) {\n        return Vec3Func.exactEquals(this, v);\n    }\n\n    applyMatrix3(mat3) {\n        Vec3Func.transformMat3(this, this, mat3);\n        return this;\n    }\n\n    applyMatrix4(mat4) {\n        Vec3Func.transformMat4(this, this, mat4);\n        return this;\n    }\n\n    scaleRotateMatrix4(mat4) {\n        Vec3Func.scaleRotateMat4(this, this, mat4);\n        return this;\n    }\n\n    applyQuaternion(q) {\n        Vec3Func.transformQuat(this, this, q);\n        return this;\n    }\n\n    angle(v) {\n        return Vec3Func.angle(this, v);\n    }\n\n    lerp(v, t) {\n        Vec3Func.lerp(this, this, v, t);\n        return this;\n    }\n\n    clone() {\n        return new Vec3(this[0], this[1], this[2]);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n\n    transformDirection(mat4) {\n        const x = this[0];\n        const y = this[1];\n        const z = this[2];\n\n        this[0] = mat4[0] * x + mat4[4] * y + mat4[8] * z;\n        this[1] = mat4[1] * x + mat4[5] * y + mat4[9] * z;\n        this[2] = mat4[2] * x + mat4[6] * y + mat4[10] * z;\n\n        return this.normalize();\n    }\n}\n","// attribute params\n// {\n//     data - typed array eg UInt16Array for indices, Float32Array\n//     size - int default 1\n//     instanced - default null. Pass divisor amount\n//     type - gl enum default gl.UNSIGNED_SHORT for 'index', gl.FLOAT for others\n//     normalized - boolean default false\n\n//     buffer - gl buffer, if buffer exists, don't need to provide data - although needs position data for bounds calculation\n//     stride - default 0 - for when passing in buffer\n//     offset - default 0 - for when passing in buffer\n//     count - default null - for when passing in buffer\n//     min - array - for when passing in buffer\n//     max - array - for when passing in buffer\n// }\n\n// TODO: fit in transform feedback\n\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempVec3 = new Vec3();\n\nlet ID = 1;\nlet ATTR_ID = 1;\n\n// To stop inifinite warnings\nlet isBoundsWarned = false;\n\nexport class Geometry {\n    constructor(gl, attributes = {}) {\n        if (!gl.canvas) console.error('gl not passed as first argument to Geometry');\n        this.gl = gl;\n        this.attributes = attributes;\n        this.id = ID++;\n\n        // Store one VAO per program attribute locations order\n        this.VAOs = {};\n\n        this.drawRange = { start: 0, count: 0 };\n        this.instancedCount = 0;\n\n        // Unbind current VAO so that new buffers don't get added to active mesh\n        this.gl.renderer.bindVertexArray(null);\n        this.gl.renderer.currentGeometry = null;\n\n        // Alias for state store to avoid redundant calls for global state\n        this.glState = this.gl.renderer.state;\n\n        // create the buffers\n        for (let key in attributes) {\n            this.addAttribute(key, attributes[key]);\n        }\n    }\n\n    addAttribute(key, attr) {\n        this.attributes[key] = attr;\n\n        // Set options\n        attr.id = ATTR_ID++; // TODO: currently unused, remove?\n        attr.size = attr.size || 1;\n        attr.type =\n            attr.type ||\n            (attr.data.constructor === Float32Array\n                ? this.gl.FLOAT\n                : attr.data.constructor === Uint16Array\n                ? this.gl.UNSIGNED_SHORT\n                : this.gl.UNSIGNED_INT); // Uint32Array\n        attr.target = key === 'index' ? this.gl.ELEMENT_ARRAY_BUFFER : this.gl.ARRAY_BUFFER;\n        attr.normalized = attr.normalized || false;\n        attr.stride = attr.stride || 0;\n        attr.offset = attr.offset || 0;\n        attr.count = attr.count || (attr.stride ? attr.data.byteLength / attr.stride : attr.data.length / attr.size);\n        attr.divisor = attr.instanced || 0;\n        attr.needsUpdate = false;\n        attr.usage = attr.usage || this.gl.STATIC_DRAW;\n\n        if (!attr.buffer) {\n            // Push data to buffer\n            this.updateAttribute(attr);\n        }\n\n        // Update geometry counts. If indexed, ignore regular attributes\n        if (attr.divisor) {\n            this.isInstanced = true;\n            if (this.instancedCount && this.instancedCount !== attr.count * attr.divisor) {\n                console.warn('geometry has multiple instanced buffers of different length');\n                return (this.instancedCount = Math.min(this.instancedCount, attr.count * attr.divisor));\n            }\n            this.instancedCount = attr.count * attr.divisor;\n        } else if (key === 'index') {\n            this.drawRange.count = attr.count;\n        } else if (!this.attributes.index) {\n            this.drawRange.count = Math.max(this.drawRange.count, attr.count);\n        }\n    }\n\n    updateAttribute(attr) {\n        const isNewBuffer = !attr.buffer;\n        if (isNewBuffer) attr.buffer = this.gl.createBuffer();\n        if (this.glState.boundBuffer !== attr.buffer) {\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n        }\n        if (isNewBuffer) {\n            this.gl.bufferData(attr.target, attr.data, attr.usage);\n        } else {\n            this.gl.bufferSubData(attr.target, 0, attr.data);\n        }\n        attr.needsUpdate = false;\n    }\n\n    setIndex(value) {\n        this.addAttribute('index', value);\n    }\n\n    setDrawRange(start, count) {\n        this.drawRange.start = start;\n        this.drawRange.count = count;\n    }\n\n    setInstancedCount(value) {\n        this.instancedCount = value;\n    }\n\n    createVAO(program) {\n        this.VAOs[program.attributeOrder] = this.gl.renderer.createVertexArray();\n        this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n        this.bindAttributes(program);\n    }\n\n    bindAttributes(program) {\n        // Link all attributes to program using gl.vertexAttribPointer\n        program.attributeLocations.forEach((location, { name, type }) => {\n            // If geometry missing a required shader attribute\n            if (!this.attributes[name]) {\n                console.warn(`active attribute ${name} not being supplied`);\n                return;\n            }\n\n            const attr = this.attributes[name];\n\n            this.gl.bindBuffer(attr.target, attr.buffer);\n            this.glState.boundBuffer = attr.buffer;\n\n            // For matrix attributes, buffer needs to be defined per column\n            let numLoc = 1;\n            if (type === 35674) numLoc = 2; // mat2\n            if (type === 35675) numLoc = 3; // mat3\n            if (type === 35676) numLoc = 4; // mat4\n\n            const size = attr.size / numLoc;\n            const stride = numLoc === 1 ? 0 : numLoc * numLoc * numLoc;\n            const offset = numLoc === 1 ? 0 : numLoc * numLoc;\n\n            for (let i = 0; i < numLoc; i++) {\n                this.gl.vertexAttribPointer(location + i, size, attr.type, attr.normalized, attr.stride + stride, attr.offset + i * offset);\n                this.gl.enableVertexAttribArray(location + i);\n\n                // For instanced attributes, divisor needs to be set.\n                // For firefox, need to set back to 0 if non-instanced drawn after instanced. Else won't render\n                this.gl.renderer.vertexAttribDivisor(location + i, attr.divisor);\n            }\n        });\n\n        // Bind indices if geometry indexed\n        if (this.attributes.index) this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER, this.attributes.index.buffer);\n    }\n\n    draw({ program, mode = this.gl.TRIANGLES }) {\n        if (this.gl.renderer.currentGeometry !== `${this.id}_${program.attributeOrder}`) {\n            if (!this.VAOs[program.attributeOrder]) this.createVAO(program);\n            this.gl.renderer.bindVertexArray(this.VAOs[program.attributeOrder]);\n            this.gl.renderer.currentGeometry = `${this.id}_${program.attributeOrder}`;\n        }\n\n        // Check if any attributes need updating\n        program.attributeLocations.forEach((location, { name }) => {\n            const attr = this.attributes[name];\n            if (attr.needsUpdate) this.updateAttribute(attr);\n        });\n\n        if (this.isInstanced) {\n            if (this.attributes.index) {\n                this.gl.renderer.drawElementsInstanced(\n                    mode,\n                    this.drawRange.count,\n                    this.attributes.index.type,\n                    this.attributes.index.offset + this.drawRange.start * 2,\n                    this.instancedCount\n                );\n            } else {\n                this.gl.renderer.drawArraysInstanced(mode, this.drawRange.start, this.drawRange.count, this.instancedCount);\n            }\n        } else {\n            if (this.attributes.index) {\n                this.gl.drawElements(mode, this.drawRange.count, this.attributes.index.type, this.attributes.index.offset + this.drawRange.start * 2);\n            } else {\n                this.gl.drawArrays(mode, this.drawRange.start, this.drawRange.count);\n            }\n        }\n    }\n\n    getPosition() {\n        // Use position buffer, or min/max if available\n        const attr = this.attributes.position;\n        // if (attr.min) return [...attr.min, ...attr.max];\n        if (attr.data) return attr;\n        if (isBoundsWarned) return;\n        console.warn('No position buffer data found to compute bounds');\n        return (isBoundsWarned = true);\n    }\n\n    computeBoundingBox(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n\n        if (!this.bounds) {\n            this.bounds = {\n                min: new Vec3(),\n                max: new Vec3(),\n                center: new Vec3(),\n                scale: new Vec3(),\n                radius: Infinity,\n            };\n        }\n\n        const min = this.bounds.min;\n        const max = this.bounds.max;\n        const center = this.bounds.center;\n        const scale = this.bounds.scale;\n\n        min.set(+Infinity);\n        max.set(-Infinity);\n\n        // TODO: check size of position (eg triangle with Vec2)\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            const x = array[i];\n            const y = array[i + 1];\n            const z = array[i + 2];\n\n            min.x = Math.min(x, min.x);\n            min.y = Math.min(y, min.y);\n            min.z = Math.min(z, min.z);\n\n            max.x = Math.max(x, max.x);\n            max.y = Math.max(y, max.y);\n            max.z = Math.max(z, max.z);\n        }\n\n        scale.sub(max, min);\n        center.add(min, max).divide(2);\n    }\n\n    computeBoundingSphere(attr) {\n        if (!attr) attr = this.getPosition();\n        const array = attr.data;\n        const stride = attr.stride ? attr.stride / array.BYTES_PER_ELEMENT : attr.size;\n\n        if (!this.bounds) this.computeBoundingBox(attr);\n\n        let maxRadiusSq = 0;\n        for (let i = 0, l = array.length; i < l; i += stride) {\n            tempVec3.fromArray(array, i);\n            maxRadiusSq = Math.max(maxRadiusSq, this.bounds.center.squaredDistance(tempVec3));\n        }\n\n        this.bounds.radius = Math.sqrt(maxRadiusSq);\n    }\n\n    remove() {\n        for (let key in this.VAOs) {\n            this.gl.renderer.deleteVertexArray(this.VAOs[key]);\n            delete this.VAOs[key];\n        }\n        for (let key in this.attributes) {\n            this.gl.deleteBuffer(this.attributes[key].buffer);\n            delete this.attributes[key];\n        }\n    }\n}\n","// TODO: upload empty texture if null ? maybe not\n// TODO: upload identity matrix if null ?\n// TODO: sampler Cube\n\nlet ID = 1;\n\n// cache of typed arrays used to flatten uniform arrays\nconst arrayCacheF32 = {};\n\nexport class Program {\n    constructor(\n        gl,\n        {\n            vertex,\n            fragment,\n            uniforms = {},\n\n            transparent = false,\n            cullFace = gl.BACK,\n            frontFace = gl.CCW,\n            depthTest = true,\n            depthWrite = true,\n            depthFunc = gl.LESS,\n        } = {}\n    ) {\n        if (!gl.canvas) console.error('gl not passed as fist argument to Program');\n        this.gl = gl;\n        this.uniforms = uniforms;\n        this.id = ID++;\n\n        if (!vertex) console.warn('vertex shader not supplied');\n        if (!fragment) console.warn('fragment shader not supplied');\n\n        // Store program state\n        this.transparent = transparent;\n        this.cullFace = cullFace;\n        this.frontFace = frontFace;\n        this.depthTest = depthTest;\n        this.depthWrite = depthWrite;\n        this.depthFunc = depthFunc;\n        this.blendFunc = {};\n        this.blendEquation = {};\n\n        // set default blendFunc if transparent flagged\n        if (this.transparent && !this.blendFunc.src) {\n            if (this.gl.renderer.premultipliedAlpha) this.setBlendFunc(this.gl.ONE, this.gl.ONE_MINUS_SRC_ALPHA);\n            else this.setBlendFunc(this.gl.SRC_ALPHA, this.gl.ONE_MINUS_SRC_ALPHA);\n        }\n\n        // compile vertex shader and log errors\n        const vertexShader = gl.createShader(gl.VERTEX_SHADER);\n        gl.shaderSource(vertexShader, vertex);\n        gl.compileShader(vertexShader);\n        if (gl.getShaderInfoLog(vertexShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(vertexShader)}\\nVertex Shader\\n${addLineNumbers(vertex)}`);\n        }\n\n        // compile fragment shader and log errors\n        const fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n        gl.shaderSource(fragmentShader, fragment);\n        gl.compileShader(fragmentShader);\n        if (gl.getShaderInfoLog(fragmentShader) !== '') {\n            console.warn(`${gl.getShaderInfoLog(fragmentShader)}\\nFragment Shader\\n${addLineNumbers(fragment)}`);\n        }\n\n        // compile program and log errors\n        this.program = gl.createProgram();\n        gl.attachShader(this.program, vertexShader);\n        gl.attachShader(this.program, fragmentShader);\n        gl.linkProgram(this.program);\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS)) {\n            return console.warn(gl.getProgramInfoLog(this.program));\n        }\n\n        // Remove shader once linked\n        gl.deleteShader(vertexShader);\n        gl.deleteShader(fragmentShader);\n\n        // Get active uniform locations\n        this.uniformLocations = new Map();\n        let numUniforms = gl.getProgramParameter(this.program, gl.ACTIVE_UNIFORMS);\n        for (let uIndex = 0; uIndex < numUniforms; uIndex++) {\n            let uniform = gl.getActiveUniform(this.program, uIndex);\n            this.uniformLocations.set(uniform, gl.getUniformLocation(this.program, uniform.name));\n\n            // split uniforms' names to separate array and struct declarations\n            const split = uniform.name.match(/(\\w+)/g);\n\n            uniform.uniformName = split[0];\n\n            if (split.length === 3) {\n                uniform.isStructArray = true;\n                uniform.structIndex = Number(split[1]);\n                uniform.structProperty = split[2];\n            } else if (split.length === 2 && isNaN(Number(split[1]))) {\n                uniform.isStruct = true;\n                uniform.structProperty = split[1];\n            }\n        }\n\n        // Get active attribute locations\n        this.attributeLocations = new Map();\n        const locations = [];\n        const numAttribs = gl.getProgramParameter(this.program, gl.ACTIVE_ATTRIBUTES);\n        for (let aIndex = 0; aIndex < numAttribs; aIndex++) {\n            const attribute = gl.getActiveAttrib(this.program, aIndex);\n            const location = gl.getAttribLocation(this.program, attribute.name);\n            // Ignore special built-in inputs. eg gl_VertexID, gl_InstanceID\n            if (location === -1) continue;\n            locations[location] = attribute.name;\n            this.attributeLocations.set(attribute, location);\n        }\n        this.attributeOrder = locations.join('');\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        this.blendFunc.src = src;\n        this.blendFunc.dst = dst;\n        this.blendFunc.srcAlpha = srcAlpha;\n        this.blendFunc.dstAlpha = dstAlpha;\n        if (src) this.transparent = true;\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        this.blendEquation.modeRGB = modeRGB;\n        this.blendEquation.modeAlpha = modeAlpha;\n    }\n\n    applyState() {\n        if (this.depthTest) this.gl.renderer.enable(this.gl.DEPTH_TEST);\n        else this.gl.renderer.disable(this.gl.DEPTH_TEST);\n\n        if (this.cullFace) this.gl.renderer.enable(this.gl.CULL_FACE);\n        else this.gl.renderer.disable(this.gl.CULL_FACE);\n\n        if (this.blendFunc.src) this.gl.renderer.enable(this.gl.BLEND);\n        else this.gl.renderer.disable(this.gl.BLEND);\n\n        if (this.cullFace) this.gl.renderer.setCullFace(this.cullFace);\n        this.gl.renderer.setFrontFace(this.frontFace);\n        this.gl.renderer.setDepthMask(this.depthWrite);\n        this.gl.renderer.setDepthFunc(this.depthFunc);\n        if (this.blendFunc.src)\n            this.gl.renderer.setBlendFunc(this.blendFunc.src, this.blendFunc.dst, this.blendFunc.srcAlpha, this.blendFunc.dstAlpha);\n        this.gl.renderer.setBlendEquation(this.blendEquation.modeRGB, this.blendEquation.modeAlpha);\n    }\n\n    use({ flipFaces = false } = {}) {\n        let textureUnit = -1;\n        const programActive = this.gl.renderer.state.currentProgram === this.id;\n\n        // Avoid gl call if program already in use\n        if (!programActive) {\n            this.gl.useProgram(this.program);\n            this.gl.renderer.state.currentProgram = this.id;\n        }\n\n        // Set only the active uniforms found in the shader\n        this.uniformLocations.forEach((location, activeUniform) => {\n            let name = activeUniform.uniformName;\n\n            // get supplied uniform\n            let uniform = this.uniforms[name];\n\n            // For structs, get the specific property instead of the entire object\n            if (activeUniform.isStruct) {\n                uniform = uniform[activeUniform.structProperty];\n                name += `.${activeUniform.structProperty}`;\n            }\n            if (activeUniform.isStructArray) {\n                uniform = uniform[activeUniform.structIndex][activeUniform.structProperty];\n                name += `[${activeUniform.structIndex}].${activeUniform.structProperty}`;\n            }\n\n            if (!uniform) {\n                return warn(`Active uniform ${name} has not been supplied`);\n            }\n\n            if (uniform && uniform.value === undefined) {\n                return warn(`${name} uniform is missing a value parameter`);\n            }\n\n            if (uniform.value.texture) {\n                textureUnit = textureUnit + 1;\n\n                // Check if texture needs to be updated\n                uniform.value.update(textureUnit);\n                return setUniform(this.gl, activeUniform.type, location, textureUnit);\n            }\n\n            // For texture arrays, set uniform as an array of texture units instead of just one\n            if (uniform.value.length && uniform.value[0].texture) {\n                const textureUnits = [];\n                uniform.value.forEach((value) => {\n                    textureUnit = textureUnit + 1;\n                    value.update(textureUnit);\n                    textureUnits.push(textureUnit);\n                });\n\n                return setUniform(this.gl, activeUniform.type, location, textureUnits);\n            }\n\n            setUniform(this.gl, activeUniform.type, location, uniform.value);\n        });\n\n        this.applyState();\n        if (flipFaces) this.gl.renderer.setFrontFace(this.frontFace === this.gl.CCW ? this.gl.CW : this.gl.CCW);\n    }\n\n    remove() {\n        this.gl.deleteProgram(this.program);\n    }\n}\n\nfunction setUniform(gl, type, location, value) {\n    value = value.length ? flatten(value) : value;\n    const setValue = gl.renderer.state.uniformLocations.get(location);\n\n    // Avoid redundant uniform commands\n    if (value.length) {\n        if (setValue === undefined || setValue.length !== value.length) {\n            // clone array to store as cache\n            gl.renderer.state.uniformLocations.set(location, value.slice(0));\n        } else {\n            if (arraysEqual(setValue, value)) return;\n\n            // Update cached array values\n            setValue.set ? setValue.set(value) : setArray(setValue, value);\n            gl.renderer.state.uniformLocations.set(location, setValue);\n        }\n    } else {\n        if (setValue === value) return;\n        gl.renderer.state.uniformLocations.set(location, value);\n    }\n\n    switch (type) {\n        case 5126:\n            return value.length ? gl.uniform1fv(location, value) : gl.uniform1f(location, value); // FLOAT\n        case 35664:\n            return gl.uniform2fv(location, value); // FLOAT_VEC2\n        case 35665:\n            return gl.uniform3fv(location, value); // FLOAT_VEC3\n        case 35666:\n            return gl.uniform4fv(location, value); // FLOAT_VEC4\n        case 35670: // BOOL\n        case 5124: // INT\n        case 35678: // SAMPLER_2D\n        case 35680:\n            return value.length ? gl.uniform1iv(location, value) : gl.uniform1i(location, value); // SAMPLER_CUBE\n        case 35671: // BOOL_VEC2\n        case 35667:\n            return gl.uniform2iv(location, value); // INT_VEC2\n        case 35672: // BOOL_VEC3\n        case 35668:\n            return gl.uniform3iv(location, value); // INT_VEC3\n        case 35673: // BOOL_VEC4\n        case 35669:\n            return gl.uniform4iv(location, value); // INT_VEC4\n        case 35674:\n            return gl.uniformMatrix2fv(location, false, value); // FLOAT_MAT2\n        case 35675:\n            return gl.uniformMatrix3fv(location, false, value); // FLOAT_MAT3\n        case 35676:\n            return gl.uniformMatrix4fv(location, false, value); // FLOAT_MAT4\n    }\n}\n\nfunction addLineNumbers(string) {\n    let lines = string.split('\\n');\n    for (let i = 0; i < lines.length; i++) {\n        lines[i] = i + 1 + ': ' + lines[i];\n    }\n    return lines.join('\\n');\n}\n\nfunction flatten(a) {\n    const arrayLen = a.length;\n    const valueLen = a[0].length;\n    if (valueLen === undefined) return a;\n    const length = arrayLen * valueLen;\n    let value = arrayCacheF32[length];\n    if (!value) arrayCacheF32[length] = value = new Float32Array(length);\n    for (let i = 0; i < arrayLen; i++) value.set(a[i], i * valueLen);\n    return value;\n}\n\nfunction arraysEqual(a, b) {\n    if (a.length !== b.length) return false;\n    for (let i = 0, l = a.length; i < l; i++) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n}\n\nfunction setArray(a, b) {\n    for (let i = 0, l = a.length; i < l; i++) {\n        a[i] = b[i];\n    }\n}\n\nlet warnCount = 0;\nfunction warn(message) {\n    if (warnCount > 100) return;\n    console.warn(message);\n    warnCount++;\n    if (warnCount > 100) console.warn('More than 100 program warnings - stopping logs.');\n}\n","import { Vec3 } from '../math/Vec3.js';\n\n// TODO: Handle context loss https://www.khronos.org/webgl/wiki/HandlingContextLost\n\n// Not automatic - devs to use these methods manually\n// gl.colorMask( colorMask, colorMask, colorMask, colorMask );\n// gl.clearColor( r, g, b, a );\n// gl.stencilMask( stencilMask );\n// gl.stencilFunc( stencilFunc, stencilRef, stencilMask );\n// gl.stencilOp( stencilFail, stencilZFail, stencilZPass );\n// gl.clearStencil( stencil );\n\nconst tempVec3 = new Vec3();\nlet ID = 1;\n\nexport class Renderer {\n    constructor({\n        canvas = document.createElement('canvas'),\n        width = 300,\n        height = 150,\n        dpr = 1,\n        alpha = false,\n        depth = true,\n        stencil = false,\n        antialias = false,\n        premultipliedAlpha = false,\n        preserveDrawingBuffer = false,\n        powerPreference = 'default',\n        autoClear = true,\n        webgl = 2,\n    } = {}) {\n        const attributes = { alpha, depth, stencil, antialias, premultipliedAlpha, preserveDrawingBuffer, powerPreference };\n        this.dpr = dpr;\n        this.alpha = alpha;\n        this.color = true;\n        this.depth = depth;\n        this.stencil = stencil;\n        this.premultipliedAlpha = premultipliedAlpha;\n        this.autoClear = autoClear;\n        this.id = ID++;\n\n        // Attempt WebGL2 unless forced to 1, if not supported fallback to WebGL1\n        if (webgl === 2) this.gl = canvas.getContext('webgl2', attributes);\n        this.isWebgl2 = !!this.gl;\n        if (!this.gl) this.gl = canvas.getContext('webgl', attributes);\n        if (!this.gl) console.error('unable to create webgl context');\n\n        // Attach renderer to gl so that all classes have access to internal state functions\n        this.gl.renderer = this;\n\n        // initialise size values\n        this.setSize(width, height);\n\n        // gl state stores to avoid redundant calls on methods used internally\n        this.state = {};\n        this.state.blendFunc = { src: this.gl.ONE, dst: this.gl.ZERO };\n        this.state.blendEquation = { modeRGB: this.gl.FUNC_ADD };\n        this.state.cullFace = null;\n        this.state.frontFace = this.gl.CCW;\n        this.state.depthMask = true;\n        this.state.depthFunc = this.gl.LESS;\n        this.state.premultiplyAlpha = false;\n        this.state.flipY = false;\n        this.state.unpackAlignment = 4;\n        this.state.framebuffer = null;\n        this.state.viewport = { x: 0, y: 0, width: null, height: null };\n        this.state.textureUnits = [];\n        this.state.activeTextureUnit = 0;\n        this.state.boundBuffer = null;\n        this.state.uniformLocations = new Map();\n        this.state.currentProgram = null;\n\n        // store requested extensions\n        this.extensions = {};\n\n        // Initialise extra format types\n        if (this.isWebgl2) {\n            this.getExtension('EXT_color_buffer_float');\n            this.getExtension('OES_texture_float_linear');\n        } else {\n            this.getExtension('OES_texture_float');\n            this.getExtension('OES_texture_float_linear');\n            this.getExtension('OES_texture_half_float');\n            this.getExtension('OES_texture_half_float_linear');\n            this.getExtension('OES_element_index_uint');\n            this.getExtension('OES_standard_derivatives');\n            this.getExtension('EXT_sRGB');\n            this.getExtension('WEBGL_depth_texture');\n            this.getExtension('WEBGL_draw_buffers');\n        }\n        this.getExtension('WEBGL_compressed_texture_astc');\n        this.getExtension('EXT_texture_compression_bptc');\n        this.getExtension('WEBGL_compressed_texture_s3tc');\n        this.getExtension('WEBGL_compressed_texture_etc1');\n        this.getExtension('WEBGL_compressed_texture_pvrtc');\n        this.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc');\n\n        // Create method aliases using extension (WebGL1) or native if available (WebGL2)\n        this.vertexAttribDivisor = this.getExtension('ANGLE_instanced_arrays', 'vertexAttribDivisor', 'vertexAttribDivisorANGLE');\n        this.drawArraysInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawArraysInstanced', 'drawArraysInstancedANGLE');\n        this.drawElementsInstanced = this.getExtension('ANGLE_instanced_arrays', 'drawElementsInstanced', 'drawElementsInstancedANGLE');\n        this.createVertexArray = this.getExtension('OES_vertex_array_object', 'createVertexArray', 'createVertexArrayOES');\n        this.bindVertexArray = this.getExtension('OES_vertex_array_object', 'bindVertexArray', 'bindVertexArrayOES');\n        this.deleteVertexArray = this.getExtension('OES_vertex_array_object', 'deleteVertexArray', 'deleteVertexArrayOES');\n        this.drawBuffers = this.getExtension('WEBGL_draw_buffers', 'drawBuffers', 'drawBuffersWEBGL');\n\n        // Store device parameters\n        this.parameters = {};\n        this.parameters.maxTextureUnits = this.gl.getParameter(this.gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS);\n        this.parameters.maxAnisotropy = this.getExtension('EXT_texture_filter_anisotropic')\n            ? this.gl.getParameter(this.getExtension('EXT_texture_filter_anisotropic').MAX_TEXTURE_MAX_ANISOTROPY_EXT)\n            : 0;\n    }\n\n    setSize(width, height) {\n        this.width = width;\n        this.height = height;\n\n        this.gl.canvas.width = width * this.dpr;\n        this.gl.canvas.height = height * this.dpr;\n\n        Object.assign(this.gl.canvas.style, {\n            width: width + 'px',\n            height: height + 'px',\n        });\n    }\n\n    setViewport(width, height, x = 0, y = 0) {\n        if (this.state.viewport.width === width && this.state.viewport.height === height) return;\n        this.state.viewport.width = width;\n        this.state.viewport.height = height;\n        this.state.viewport.x = x;\n        this.state.viewport.y = y;\n        this.gl.viewport(x, y, width, height);\n    }\n\n    setScissor(width, height, x = 0, y = 0) {\n        this.gl.scissor(x, y, width, height);\n    }\n\n    enable(id) {\n        if (this.state[id] === true) return;\n        this.gl.enable(id);\n        this.state[id] = true;\n    }\n\n    disable(id) {\n        if (this.state[id] === false) return;\n        this.gl.disable(id);\n        this.state[id] = false;\n    }\n\n    setBlendFunc(src, dst, srcAlpha, dstAlpha) {\n        if (\n            this.state.blendFunc.src === src &&\n            this.state.blendFunc.dst === dst &&\n            this.state.blendFunc.srcAlpha === srcAlpha &&\n            this.state.blendFunc.dstAlpha === dstAlpha\n        )\n            return;\n        this.state.blendFunc.src = src;\n        this.state.blendFunc.dst = dst;\n        this.state.blendFunc.srcAlpha = srcAlpha;\n        this.state.blendFunc.dstAlpha = dstAlpha;\n        if (srcAlpha !== undefined) this.gl.blendFuncSeparate(src, dst, srcAlpha, dstAlpha);\n        else this.gl.blendFunc(src, dst);\n    }\n\n    setBlendEquation(modeRGB, modeAlpha) {\n        modeRGB = modeRGB || this.gl.FUNC_ADD;\n        if (this.state.blendEquation.modeRGB === modeRGB && this.state.blendEquation.modeAlpha === modeAlpha) return;\n        this.state.blendEquation.modeRGB = modeRGB;\n        this.state.blendEquation.modeAlpha = modeAlpha;\n        if (modeAlpha !== undefined) this.gl.blendEquationSeparate(modeRGB, modeAlpha);\n        else this.gl.blendEquation(modeRGB);\n    }\n\n    setCullFace(value) {\n        if (this.state.cullFace === value) return;\n        this.state.cullFace = value;\n        this.gl.cullFace(value);\n    }\n\n    setFrontFace(value) {\n        if (this.state.frontFace === value) return;\n        this.state.frontFace = value;\n        this.gl.frontFace(value);\n    }\n\n    setDepthMask(value) {\n        if (this.state.depthMask === value) return;\n        this.state.depthMask = value;\n        this.gl.depthMask(value);\n    }\n\n    setDepthFunc(value) {\n        if (this.state.depthFunc === value) return;\n        this.state.depthFunc = value;\n        this.gl.depthFunc(value);\n    }\n\n    activeTexture(value) {\n        if (this.state.activeTextureUnit === value) return;\n        this.state.activeTextureUnit = value;\n        this.gl.activeTexture(this.gl.TEXTURE0 + value);\n    }\n\n    bindFramebuffer({ target = this.gl.FRAMEBUFFER, buffer = null } = {}) {\n        if (this.state.framebuffer === buffer) return;\n        this.state.framebuffer = buffer;\n        this.gl.bindFramebuffer(target, buffer);\n    }\n\n    getExtension(extension, webgl2Func, extFunc) {\n        // if webgl2 function supported, return func bound to gl context\n        if (webgl2Func && this.gl[webgl2Func]) return this.gl[webgl2Func].bind(this.gl);\n\n        // fetch extension once only\n        if (!this.extensions[extension]) {\n            this.extensions[extension] = this.gl.getExtension(extension);\n        }\n\n        // return extension if no function requested\n        if (!webgl2Func) return this.extensions[extension];\n\n        // Return null if extension not supported\n        if (!this.extensions[extension]) return null;\n\n        // return extension function, bound to extension\n        return this.extensions[extension][extFunc].bind(this.extensions[extension]);\n    }\n\n    sortOpaque(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else if (a.zDepth !== b.zDepth) {\n            return a.zDepth - b.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortTransparent(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        }\n        if (a.zDepth !== b.zDepth) {\n            return b.zDepth - a.zDepth;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    sortUI(a, b) {\n        if (a.renderOrder !== b.renderOrder) {\n            return a.renderOrder - b.renderOrder;\n        } else if (a.program.id !== b.program.id) {\n            return a.program.id - b.program.id;\n        } else {\n            return b.id - a.id;\n        }\n    }\n\n    getRenderList({ scene, camera, frustumCull, sort }) {\n        let renderList = [];\n\n        if (camera && frustumCull) camera.updateFrustum();\n\n        // Get visible\n        scene.traverse((node) => {\n            if (!node.visible) return true;\n            if (!node.draw) return;\n\n            if (frustumCull && node.frustumCulled && camera) {\n                if (!camera.frustumIntersectsMesh(node)) return;\n            }\n\n            renderList.push(node);\n        });\n\n        if (sort) {\n            const opaque = [];\n            const transparent = []; // depthTest true\n            const ui = []; // depthTest false\n\n            renderList.forEach((node) => {\n                // Split into the 3 render groups\n                if (!node.program.transparent) {\n                    opaque.push(node);\n                } else if (node.program.depthTest) {\n                    transparent.push(node);\n                } else {\n                    ui.push(node);\n                }\n\n                node.zDepth = 0;\n\n                // Only calculate z-depth if renderOrder unset and depthTest is true\n                if (node.renderOrder !== 0 || !node.program.depthTest || !camera) return;\n\n                // update z-depth\n                node.worldMatrix.getTranslation(tempVec3);\n                tempVec3.applyMatrix4(camera.projectionViewMatrix);\n                node.zDepth = tempVec3.z;\n            });\n\n            opaque.sort(this.sortOpaque);\n            transparent.sort(this.sortTransparent);\n            ui.sort(this.sortUI);\n\n            renderList = opaque.concat(transparent, ui);\n        }\n\n        return renderList;\n    }\n\n    render({ scene, camera, target = null, update = true, sort = true, frustumCull = true, clear }) {\n        if (target === null) {\n            // make sure no render target bound so draws to canvas\n            this.bindFramebuffer();\n            this.setViewport(this.width * this.dpr, this.height * this.dpr);\n        } else {\n            // bind supplied render target and update viewport\n            this.bindFramebuffer(target);\n            this.setViewport(target.width, target.height);\n        }\n\n        if (clear || (this.autoClear && clear !== false)) {\n            // Ensure depth buffer writing is enabled so it can be cleared\n            if (this.depth && (!target || target.depth)) {\n                this.enable(this.gl.DEPTH_TEST);\n                this.setDepthMask(true);\n            }\n            this.gl.clear(\n                (this.color ? this.gl.COLOR_BUFFER_BIT : 0) |\n                    (this.depth ? this.gl.DEPTH_BUFFER_BIT : 0) |\n                    (this.stencil ? this.gl.STENCIL_BUFFER_BIT : 0)\n            );\n        }\n\n        // updates all scene graph matrices\n        if (update) scene.updateMatrixWorld();\n\n        // Update camera separately, in case not in scene graph\n        if (camera) camera.updateMatrixWorld();\n\n        // Get render list - entails culling and sorting\n        const renderList = this.getRenderList({ scene, camera, frustumCull, sort });\n\n        renderList.forEach((node) => {\n            node.draw({ camera });\n        });\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nexport function set(out, x, y, z, w) {\n    out[0] = x;\n    out[1] = y;\n    out[2] = z;\n    out[3] = w;\n    return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nexport function scale(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    return out;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport function length(a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    return Math.sqrt(x * x + y * y + z * z + w * w);\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nexport function normalize(out, a) {\n    let x = a[0];\n    let y = a[1];\n    let z = a[2];\n    let w = a[3];\n    let len = x * x + y * y + z * z + w * w;\n    if (len > 0) {\n        len = 1 / Math.sqrt(len);\n    }\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n    return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nexport function dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nexport function lerp(out, a, b, t) {\n    let ax = a[0];\n    let ay = a[1];\n    let az = a[2];\n    let aw = a[3];\n    out[0] = ax + t * (b[0] - ax);\n    out[1] = ay + t * (b[1] - ay);\n    out[2] = az + t * (b[2] - az);\n    out[3] = aw + t * (b[3] - aw);\n    return out;\n}\n","import * as vec4 from './Vec4Func.js';\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nexport function identity(out) {\n    out[0] = 0;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 1;\n    return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nexport function setAxisAngle(out, axis, rad) {\n    rad = rad * 0.5;\n    let s = Math.sin(rad);\n    out[0] = s * axis[0];\n    out[1] = s * axis[1];\n    out[2] = s * axis[2];\n    out[3] = Math.cos(rad);\n    return out;\n}\n\n/**\n * Multiplies two quats\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nexport function multiply(out, a, b) {\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    out[0] = ax * bw + aw * bx + ay * bz - az * by;\n    out[1] = ay * bw + aw * by + az * bx - ax * bz;\n    out[2] = az * bw + aw * bz + ax * by - ay * bx;\n    out[3] = aw * bw - ax * bx - ay * by - az * bz;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateX(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + aw * bx;\n    out[1] = ay * bw + az * bx;\n    out[2] = az * bw - ay * bx;\n    out[3] = aw * bw - ax * bx;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateY(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let by = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw - az * by;\n    out[1] = ay * bw + aw * by;\n    out[2] = az * bw + ax * by;\n    out[3] = aw * bw - ay * by;\n    return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nexport function rotateZ(out, a, rad) {\n    rad *= 0.5;\n\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bz = Math.sin(rad),\n        bw = Math.cos(rad);\n\n    out[0] = ax * bw + ay * bz;\n    out[1] = ay * bw - ax * bz;\n    out[2] = az * bw + aw * bz;\n    out[3] = aw * bw - az * bz;\n    return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nexport function slerp(out, a, b, t) {\n    // benchmarks:\n    //    http://jsperf.com/quaternion-slerp-implementations\n    let ax = a[0],\n        ay = a[1],\n        az = a[2],\n        aw = a[3];\n    let bx = b[0],\n        by = b[1],\n        bz = b[2],\n        bw = b[3];\n\n    let omega, cosom, sinom, scale0, scale1;\n\n    // calc cosine\n    cosom = ax * bx + ay * by + az * bz + aw * bw;\n    // adjust signs (if necessary)\n    if (cosom < 0.0) {\n        cosom = -cosom;\n        bx = -bx;\n        by = -by;\n        bz = -bz;\n        bw = -bw;\n    }\n    // calculate coefficients\n    if (1.0 - cosom > 0.000001) {\n        // standard case (slerp)\n        omega = Math.acos(cosom);\n        sinom = Math.sin(omega);\n        scale0 = Math.sin((1.0 - t) * omega) / sinom;\n        scale1 = Math.sin(t * omega) / sinom;\n    } else {\n        // \"from\" and \"to\" quaternions are very close\n        //  ... so we can do a linear interpolation\n        scale0 = 1.0 - t;\n        scale1 = t;\n    }\n    // calculate final values\n    out[0] = scale0 * ax + scale1 * bx;\n    out[1] = scale0 * ay + scale1 * by;\n    out[2] = scale0 * az + scale1 * bz;\n    out[3] = scale0 * aw + scale1 * bw;\n\n    return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nexport function invert(out, a) {\n    let a0 = a[0],\n        a1 = a[1],\n        a2 = a[2],\n        a3 = a[3];\n    let dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3;\n    let invDot = dot ? 1.0 / dot : 0;\n\n    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n    out[0] = -a0 * invDot;\n    out[1] = -a1 * invDot;\n    out[2] = -a2 * invDot;\n    out[3] = a3 * invDot;\n    return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nexport function conjugate(out, a) {\n    out[0] = -a[0];\n    out[1] = -a[1];\n    out[2] = -a[2];\n    out[3] = a[3];\n    return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nexport function fromMat3(out, m) {\n    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n    // article \"Quaternion Calculus and Fast Animation\".\n    let fTrace = m[0] + m[4] + m[8];\n    let fRoot;\n\n    if (fTrace > 0.0) {\n        // |w| > 1/2, may as well choose w > 1/2\n        fRoot = Math.sqrt(fTrace + 1.0); // 2w\n        out[3] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot; // 1/(4w)\n        out[0] = (m[5] - m[7]) * fRoot;\n        out[1] = (m[6] - m[2]) * fRoot;\n        out[2] = (m[1] - m[3]) * fRoot;\n    } else {\n        // |w| <= 1/2\n        let i = 0;\n        if (m[4] > m[0]) i = 1;\n        if (m[8] > m[i * 3 + i]) i = 2;\n        let j = (i + 1) % 3;\n        let k = (i + 2) % 3;\n\n        fRoot = Math.sqrt(m[i * 3 + i] - m[j * 3 + j] - m[k * 3 + k] + 1.0);\n        out[i] = 0.5 * fRoot;\n        fRoot = 0.5 / fRoot;\n        out[3] = (m[j * 3 + k] - m[k * 3 + j]) * fRoot;\n        out[j] = (m[j * 3 + i] + m[i * 3 + j]) * fRoot;\n        out[k] = (m[k * 3 + i] + m[i * 3 + k]) * fRoot;\n    }\n\n    return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} euler Angles to rotate around each axis in degrees.\n * @param {String} order detailing order of operations. Default 'XYZ'.\n * @returns {quat} out\n * @function\n */\nexport function fromEuler(out, euler, order = 'YXZ') {\n    let sx = Math.sin(euler[0] * 0.5);\n    let cx = Math.cos(euler[0] * 0.5);\n    let sy = Math.sin(euler[1] * 0.5);\n    let cy = Math.cos(euler[1] * 0.5);\n    let sz = Math.sin(euler[2] * 0.5);\n    let cz = Math.cos(euler[2] * 0.5);\n\n    if (order === 'XYZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'YXZ') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'ZXY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'ZYX') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    } else if (order === 'YZX') {\n        out[0] = sx * cy * cz + cx * sy * sz;\n        out[1] = cx * sy * cz + sx * cy * sz;\n        out[2] = cx * cy * sz - sx * sy * cz;\n        out[3] = cx * cy * cz - sx * sy * sz;\n    } else if (order === 'XZY') {\n        out[0] = sx * cy * cz - cx * sy * sz;\n        out[1] = cx * sy * cz - sx * cy * sz;\n        out[2] = cx * cy * sz + sx * sy * cz;\n        out[3] = cx * cy * cz + sx * sy * sz;\n    }\n\n    return out;\n}\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nexport const copy = vec4.copy;\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nexport const set = vec4.set;\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nexport const add = vec4.add;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nexport const scale = vec4.scale;\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nexport const dot = vec4.dot;\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nexport const lerp = vec4.lerp;\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nexport const length = vec4.length;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nexport const normalize = vec4.normalize;\n","import * as QuatFunc from './functions/QuatFunc.js';\n\nexport class Quat extends Array {\n    constructor(x = 0, y = 0, z = 0, w = 1) {\n        super(x, y, z, w);\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    get w() {\n        return this[3];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set w(v) {\n        this[3] = v;\n        this.onChange();\n    }\n\n    identity() {\n        QuatFunc.identity(this);\n        this.onChange();\n        return this;\n    }\n\n    set(x, y, z, w) {\n        if (x.length) return this.copy(x);\n        QuatFunc.set(this, x, y, z, w);\n        this.onChange();\n        return this;\n    }\n\n    rotateX(a) {\n        QuatFunc.rotateX(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateY(a) {\n        QuatFunc.rotateY(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    rotateZ(a) {\n        QuatFunc.rotateZ(this, this, a);\n        this.onChange();\n        return this;\n    }\n\n    inverse(q = this) {\n        QuatFunc.invert(this, q);\n        this.onChange();\n        return this;\n    }\n\n    conjugate(q = this) {\n        QuatFunc.conjugate(this, q);\n        this.onChange();\n        return this;\n    }\n\n    copy(q) {\n        QuatFunc.copy(this, q);\n        this.onChange();\n        return this;\n    }\n\n    normalize(q = this) {\n        QuatFunc.normalize(this, q);\n        this.onChange();\n        return this;\n    }\n\n    multiply(qA, qB) {\n        if (qB) {\n            QuatFunc.multiply(this, qA, qB);\n        } else {\n            QuatFunc.multiply(this, this, qA);\n        }\n        this.onChange();\n        return this;\n    }\n\n    dot(v) {\n        return QuatFunc.dot(this, v);\n    }\n\n    fromMatrix3(matrix3) {\n        QuatFunc.fromMat3(this, matrix3);\n        this.onChange();\n        return this;\n    }\n\n    fromEuler(euler) {\n        QuatFunc.fromEuler(this, euler, euler.order);\n        return this;\n    }\n\n    fromAxisAngle(axis, a) {\n        QuatFunc.setAxisAngle(this, axis, a);\n        return this;\n    }\n\n    slerp(q, t) {\n        QuatFunc.slerp(this, this, q, t);\n        return this;\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        return a;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m03;\n    out[4] = m10;\n    out[5] = m11;\n    out[6] = m12;\n    out[7] = m13;\n    out[8] = m20;\n    out[9] = m21;\n    out[10] = m22;\n    out[11] = m23;\n    out[12] = m30;\n    out[13] = m31;\n    out[14] = m32;\n    out[15] = m33;\n    return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = 1;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 1;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a03 = a[3];\n        let a12 = a[6],\n            a13 = a[7];\n        let a23 = a[11];\n\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a01;\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a02;\n        out[9] = a12;\n        out[11] = a[14];\n        out[12] = a03;\n        out[13] = a13;\n        out[14] = a23;\n    } else {\n        out[0] = a[0];\n        out[1] = a[4];\n        out[2] = a[8];\n        out[3] = a[12];\n        out[4] = a[1];\n        out[5] = a[5];\n        out[6] = a[9];\n        out[7] = a[13];\n        out[8] = a[2];\n        out[9] = a[6];\n        out[10] = a[10];\n        out[11] = a[14];\n        out[12] = a[3];\n        out[13] = a[7];\n        out[14] = a[11];\n        out[15] = a[15];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    // Cache only the current line of the second matrix\n    let b0 = b[0],\n        b1 = b[1],\n        b2 = b[2],\n        b3 = b[3];\n    out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[4];\n    b1 = b[5];\n    b2 = b[6];\n    b3 = b[7];\n    out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[8];\n    b1 = b[9];\n    b2 = b[10];\n    b3 = b[11];\n    out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n    b0 = b[12];\n    b1 = b[13];\n    b2 = b[14];\n    b3 = b[15];\n    out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n    out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n    out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n    out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n    return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n\n    if (a === out) {\n        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n    } else {\n        a00 = a[0];\n        a01 = a[1];\n        a02 = a[2];\n        a03 = a[3];\n        a10 = a[4];\n        a11 = a[5];\n        a12 = a[6];\n        a13 = a[7];\n        a20 = a[8];\n        a21 = a[9];\n        a22 = a[10];\n        a23 = a[11];\n\n        out[0] = a00;\n        out[1] = a01;\n        out[2] = a02;\n        out[3] = a03;\n        out[4] = a10;\n        out[5] = a11;\n        out[6] = a12;\n        out[7] = a13;\n        out[8] = a20;\n        out[9] = a21;\n        out[10] = a22;\n        out[11] = a23;\n\n        out[12] = a00 * x + a10 * y + a20 * z + a[12];\n        out[13] = a01 * x + a11 * y + a21 * z + a[13];\n        out[14] = a02 * x + a12 * y + a22 * z + a[14];\n        out[15] = a03 * x + a13 * y + a23 * z + a[15];\n    }\n\n    return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1],\n        z = v[2];\n\n    out[0] = a[0] * x;\n    out[1] = a[1] * x;\n    out[2] = a[2] * x;\n    out[3] = a[3] * x;\n    out[4] = a[4] * y;\n    out[5] = a[5] * y;\n    out[6] = a[6] * y;\n    out[7] = a[7] * y;\n    out[8] = a[8] * z;\n    out[9] = a[9] * z;\n    out[10] = a[10] * z;\n    out[11] = a[11] * z;\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n    return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n    let x = axis[0],\n        y = axis[1],\n        z = axis[2];\n    let len = Math.hypot(x, y, z);\n    let s, c, t;\n    let a00, a01, a02, a03;\n    let a10, a11, a12, a13;\n    let a20, a21, a22, a23;\n    let b00, b01, b02;\n    let b10, b11, b12;\n    let b20, b21, b22;\n\n    if (Math.abs(len) < EPSILON) {\n        return null;\n    }\n\n    len = 1 / len;\n    x *= len;\n    y *= len;\n    z *= len;\n\n    s = Math.sin(rad);\n    c = Math.cos(rad);\n    t = 1 - c;\n\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    // Construct the elements of the rotation matrix\n    b00 = x * x * t + c;\n    b01 = y * x * t + z * s;\n    b02 = z * x * t - y * s;\n    b10 = x * y * t - z * s;\n    b11 = y * y * t + c;\n    b12 = z * y * t + x * s;\n    b20 = x * z * t + y * s;\n    b21 = y * z * t - x * s;\n    b22 = z * z * t + c;\n\n    // Perform rotation-specific matrix multiplication\n    out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n    out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n    out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n    out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n    out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n    out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n    out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n    out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n    out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n    out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n    out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n    out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n    if (a !== out) {\n        // If the source and destination differ, copy the unchanged last row\n        out[12] = a[12];\n        out[13] = a[13];\n        out[14] = a[14];\n        out[15] = a[15];\n    }\n    return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n    out[0] = mat[12];\n    out[1] = mat[13];\n    out[2] = mat[14];\n\n    return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    out[0] = Math.hypot(m11, m12, m13);\n    out[1] = Math.hypot(m21, m22, m23);\n    out[2] = Math.hypot(m31, m32, m33);\n\n    return out;\n}\n\nexport function getMaxScaleOnAxis(mat) {\n    let m11 = mat[0];\n    let m12 = mat[1];\n    let m13 = mat[2];\n    let m21 = mat[4];\n    let m22 = mat[5];\n    let m23 = mat[6];\n    let m31 = mat[8];\n    let m32 = mat[9];\n    let m33 = mat[10];\n\n    const x = m11 * m11 + m12 * m12 + m13 * m13;\n    const y = m21 * m21 + m22 * m22 + m23 * m23;\n    const z = m31 * m31 + m32 * m32 + m33 * m33;\n\n    return Math.sqrt(Math.max(x, y, z));\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport const getRotation = (function () {\n    const temp = [0, 0, 0];\n\n    return function (out, mat) {\n        let scaling = temp;\n        getScaling(scaling, mat);\n\n        let is1 = 1 / scaling[0];\n        let is2 = 1 / scaling[1];\n        let is3 = 1 / scaling[2];\n\n        let sm11 = mat[0] * is1;\n        let sm12 = mat[1] * is2;\n        let sm13 = mat[2] * is3;\n        let sm21 = mat[4] * is1;\n        let sm22 = mat[5] * is2;\n        let sm23 = mat[6] * is3;\n        let sm31 = mat[8] * is1;\n        let sm32 = mat[9] * is2;\n        let sm33 = mat[10] * is3;\n\n        let trace = sm11 + sm22 + sm33;\n        let S = 0;\n\n        if (trace > 0) {\n            S = Math.sqrt(trace + 1.0) * 2;\n            out[3] = 0.25 * S;\n            out[0] = (sm23 - sm32) / S;\n            out[1] = (sm31 - sm13) / S;\n            out[2] = (sm12 - sm21) / S;\n        } else if (sm11 > sm22 && sm11 > sm33) {\n            S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n            out[3] = (sm23 - sm32) / S;\n            out[0] = 0.25 * S;\n            out[1] = (sm12 + sm21) / S;\n            out[2] = (sm31 + sm13) / S;\n        } else if (sm22 > sm33) {\n            S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n            out[3] = (sm31 - sm13) / S;\n            out[0] = (sm12 + sm21) / S;\n            out[1] = 0.25 * S;\n            out[2] = (sm23 + sm32) / S;\n        } else {\n            S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n            out[3] = (sm12 - sm21) / S;\n            out[0] = (sm31 + sm13) / S;\n            out[1] = (sm23 + sm32) / S;\n            out[2] = 0.25 * S;\n        }\n\n        return out;\n    };\n})();\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n    // Quaternion math\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let xy = x * y2;\n    let xz = x * z2;\n    let yy = y * y2;\n    let yz = y * z2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n    let sx = s[0];\n    let sy = s[1];\n    let sz = s[2];\n\n    out[0] = (1 - (yy + zz)) * sx;\n    out[1] = (xy + wz) * sx;\n    out[2] = (xz - wy) * sx;\n    out[3] = 0;\n    out[4] = (xy - wz) * sy;\n    out[5] = (1 - (xx + zz)) * sy;\n    out[6] = (yz + wx) * sy;\n    out[7] = 0;\n    out[8] = (xz + wy) * sz;\n    out[9] = (yz - wx) * sz;\n    out[10] = (1 - (xx + yy)) * sz;\n    out[11] = 0;\n    out[12] = v[0];\n    out[13] = v[1];\n    out[14] = v[2];\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[1] = yx + wz;\n    out[2] = zx - wy;\n    out[3] = 0;\n\n    out[4] = yx - wz;\n    out[5] = 1 - xx - zz;\n    out[6] = zy + wx;\n    out[7] = 0;\n\n    out[8] = zx + wy;\n    out[9] = zy - wx;\n    out[10] = 1 - xx - yy;\n    out[11] = 0;\n\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n    out[15] = 1;\n\n    return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n    let f = 1.0 / Math.tan(fovy / 2);\n    let nf = 1 / (near - far);\n    out[0] = f / aspect;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = f;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = (far + near) * nf;\n    out[11] = -1;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 2 * far * near * nf;\n    out[15] = 0;\n    return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n    let lr = 1 / (left - right);\n    let bt = 1 / (bottom - top);\n    let nf = 1 / (near - far);\n    out[0] = -2 * lr;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[5] = -2 * bt;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[10] = 2 * nf;\n    out[11] = 0;\n    out[12] = (left + right) * lr;\n    out[13] = (top + bottom) * bt;\n    out[14] = (far + near) * nf;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} target Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n    let eyex = eye[0],\n        eyey = eye[1],\n        eyez = eye[2],\n        upx = up[0],\n        upy = up[1],\n        upz = up[2];\n\n    let z0 = eyex - target[0],\n        z1 = eyey - target[1],\n        z2 = eyez - target[2];\n\n    let len = z0 * z0 + z1 * z1 + z2 * z2;\n    if (len === 0) {\n        // eye and target are in the same position\n        z2 = 1;\n    } else {\n        len = 1 / Math.sqrt(len);\n        z0 *= len;\n        z1 *= len;\n        z2 *= len;\n    }\n\n    let x0 = upy * z2 - upz * z1,\n        x1 = upz * z0 - upx * z2,\n        x2 = upx * z1 - upy * z0;\n\n    len = x0 * x0 + x1 * x1 + x2 * x2;\n    if (len === 0) {\n        // up and z are parallel\n        if (upz) {\n            upx += 1e-6;\n        } else if (upy) {\n            upz += 1e-6;\n        } else {\n            upy += 1e-6;\n        }\n        (x0 = upy * z2 - upz * z1), (x1 = upz * z0 - upx * z2), (x2 = upx * z1 - upy * z0);\n\n        len = x0 * x0 + x1 * x1 + x2 * x2;\n    }\n\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n\n    out[0] = x0;\n    out[1] = x1;\n    out[2] = x2;\n    out[3] = 0;\n    out[4] = z1 * x2 - z2 * x1;\n    out[5] = z2 * x0 - z0 * x2;\n    out[6] = z0 * x1 - z1 * x0;\n    out[7] = 0;\n    out[8] = z0;\n    out[9] = z1;\n    out[10] = z2;\n    out[11] = 0;\n    out[12] = eyex;\n    out[13] = eyey;\n    out[14] = eyez;\n    out[15] = 1;\n    return out;\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    out[9] = a[9] + b[9];\n    out[10] = a[10] + b[10];\n    out[11] = a[11] + b[11];\n    out[12] = a[12] + b[12];\n    out[13] = a[13] + b[13];\n    out[14] = a[14] + b[14];\n    out[15] = a[15] + b[15];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    out[9] = a[9] - b[9];\n    out[10] = a[10] - b[10];\n    out[11] = a[11] - b[11];\n    out[12] = a[12] - b[12];\n    out[13] = a[13] - b[13];\n    out[14] = a[14] - b[14];\n    out[15] = a[15] - b[15];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    out[9] = a[9] * b;\n    out[10] = a[10] * b;\n    out[11] = a[11] * b;\n    out[12] = a[12] * b;\n    out[13] = a[13] * b;\n    out[14] = a[14] * b;\n    out[15] = a[15] * b;\n    return out;\n}\n","import * as Mat4Func from './functions/Mat4Func.js';\n\nexport class Mat4 extends Array {\n    constructor(\n        m00 = 1,\n        m01 = 0,\n        m02 = 0,\n        m03 = 0,\n        m10 = 0,\n        m11 = 1,\n        m12 = 0,\n        m13 = 0,\n        m20 = 0,\n        m21 = 0,\n        m22 = 1,\n        m23 = 0,\n        m30 = 0,\n        m31 = 0,\n        m32 = 0,\n        m33 = 1\n    ) {\n        super(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    get x() {\n        return this[12];\n    }\n\n    get y() {\n        return this[13];\n    }\n\n    get z() {\n        return this[14];\n    }\n\n    get w() {\n        return this[15];\n    }\n\n    set x(v) {\n        this[12] = v;\n    }\n\n    set y(v) {\n        this[13] = v;\n    }\n\n    set z(v) {\n        this[14] = v;\n    }\n\n    set w(v) {\n        this[15] = v;\n    }\n\n    set(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n        if (m00.length) return this.copy(m00);\n        Mat4Func.set(this, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat4Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, axis, m = this) {\n        Mat4Func.rotate(this, m, v, axis);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat4Func.scale(this, m, typeof v === 'number' ? [v, v, v] : v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat4Func.multiply(this, ma, mb);\n        } else {\n            Mat4Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat4Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat4Func.copy(this, m);\n        return this;\n    }\n\n    fromPerspective({ fov, aspect, near, far } = {}) {\n        Mat4Func.perspective(this, fov, aspect, near, far);\n        return this;\n    }\n\n    fromOrthogonal({ left, right, bottom, top, near, far }) {\n        Mat4Func.ortho(this, left, right, bottom, top, near, far);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat4Func.fromQuat(this, q);\n        return this;\n    }\n\n    setPosition(v) {\n        this.x = v[0];\n        this.y = v[1];\n        this.z = v[2];\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat4Func.invert(this, m);\n        return this;\n    }\n\n    compose(q, pos, scale) {\n        Mat4Func.fromRotationTranslationScale(this, q, pos, scale);\n        return this;\n    }\n\n    getRotation(q) {\n        Mat4Func.getRotation(q, this);\n        return this;\n    }\n\n    getTranslation(pos) {\n        Mat4Func.getTranslation(pos, this);\n        return this;\n    }\n\n    getScaling(scale) {\n        Mat4Func.getScaling(scale, this);\n        return this;\n    }\n\n    getMaxScaleOnAxis() {\n        return Mat4Func.getMaxScaleOnAxis(this);\n    }\n\n    lookAt(eye, target, up) {\n        Mat4Func.targetTo(this, eye, target, up);\n        return this;\n    }\n\n    determinant() {\n        return Mat4Func.determinant(this);\n    }\n\n    fromArray(a, o = 0) {\n        this[0] = a[o];\n        this[1] = a[o + 1];\n        this[2] = a[o + 2];\n        this[3] = a[o + 3];\n        this[4] = a[o + 4];\n        this[5] = a[o + 5];\n        this[6] = a[o + 6];\n        this[7] = a[o + 7];\n        this[8] = a[o + 8];\n        this[9] = a[o + 9];\n        this[10] = a[o + 10];\n        this[11] = a[o + 11];\n        this[12] = a[o + 12];\n        this[13] = a[o + 13];\n        this[14] = a[o + 14];\n        this[15] = a[o + 15];\n        return this;\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        a[o + 3] = this[3];\n        a[o + 4] = this[4];\n        a[o + 5] = this[5];\n        a[o + 6] = this[6];\n        a[o + 7] = this[7];\n        a[o + 8] = this[8];\n        a[o + 9] = this[9];\n        a[o + 10] = this[10];\n        a[o + 11] = this[11];\n        a[o + 12] = this[12];\n        a[o + 13] = this[13];\n        a[o + 14] = this[14];\n        a[o + 15] = this[15];\n        return a;\n    }\n}\n","// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\nexport function fromRotationMatrix(out, m, order = 'YXZ') {\n    if (order === 'XYZ') {\n        out[1] = Math.asin(Math.min(Math.max(m[8], -1), 1));\n        if (Math.abs(m[8]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[2] = Math.atan2(-m[4], m[0]);\n        } else {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[2] = 0;\n        }\n    } else if (order === 'YXZ') {\n        out[0] = Math.asin(-Math.min(Math.max(m[9], -1), 1));\n        if (Math.abs(m[9]) < 0.99999) {\n            out[1] = Math.atan2(m[8], m[10]);\n            out[2] = Math.atan2(m[1], m[5]);\n        } else {\n            out[1] = Math.atan2(-m[2], m[0]);\n            out[2] = 0;\n        }\n    } else if (order === 'ZXY') {\n        out[0] = Math.asin(Math.min(Math.max(m[6], -1), 1));\n        if (Math.abs(m[6]) < 0.99999) {\n            out[1] = Math.atan2(-m[2], m[10]);\n            out[2] = Math.atan2(-m[4], m[5]);\n        } else {\n            out[1] = 0;\n            out[2] = Math.atan2(m[1], m[0]);\n        }\n    } else if (order === 'ZYX') {\n        out[1] = Math.asin(-Math.min(Math.max(m[2], -1), 1));\n        if (Math.abs(m[2]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[10]);\n            out[2] = Math.atan2(m[1], m[0]);\n        } else {\n            out[0] = 0;\n            out[2] = Math.atan2(-m[4], m[5]);\n        }\n    } else if (order === 'YZX') {\n        out[2] = Math.asin(Math.min(Math.max(m[1], -1), 1));\n        if (Math.abs(m[1]) < 0.99999) {\n            out[0] = Math.atan2(-m[9], m[5]);\n            out[1] = Math.atan2(-m[2], m[0]);\n        } else {\n            out[0] = 0;\n            out[1] = Math.atan2(m[8], m[10]);\n        }\n    } else if (order === 'XZY') {\n        out[2] = Math.asin(-Math.min(Math.max(m[4], -1), 1));\n        if (Math.abs(m[4]) < 0.99999) {\n            out[0] = Math.atan2(m[6], m[5]);\n            out[1] = Math.atan2(m[8], m[0]);\n        } else {\n            out[0] = Math.atan2(-m[9], m[10]);\n            out[1] = 0;\n        }\n    }\n\n    return out;\n}\n","import * as EulerFunc from './functions/EulerFunc.js';\nimport { Mat4 } from './Mat4.js';\n\nconst tmpMat4 = new Mat4();\n\nexport class Euler extends Array {\n    constructor(x = 0, y = x, z = x, order = 'YXZ') {\n        super(x, y, z);\n        this.order = order;\n        this.onChange = () => {};\n        return this;\n    }\n\n    get x() {\n        return this[0];\n    }\n\n    get y() {\n        return this[1];\n    }\n\n    get z() {\n        return this[2];\n    }\n\n    set x(v) {\n        this[0] = v;\n        this.onChange();\n    }\n\n    set y(v) {\n        this[1] = v;\n        this.onChange();\n    }\n\n    set z(v) {\n        this[2] = v;\n        this.onChange();\n    }\n\n    set(x, y = x, z = x) {\n        if (x.length) return this.copy(x);\n        this[0] = x;\n        this[1] = y;\n        this[2] = z;\n        this.onChange();\n        return this;\n    }\n\n    copy(v) {\n        this[0] = v[0];\n        this[1] = v[1];\n        this[2] = v[2];\n        this.onChange();\n        return this;\n    }\n\n    reorder(order) {\n        this.order = order;\n        this.onChange();\n        return this;\n    }\n\n    fromRotationMatrix(m, order = this.order) {\n        EulerFunc.fromRotationMatrix(this, m, order);\n        return this;\n    }\n\n    fromQuaternion(q, order = this.order) {\n        tmpMat4.fromQuaternion(q);\n        return this.fromRotationMatrix(tmpMat4, order);\n    }\n\n    toArray(a = [], o = 0) {\n        a[o] = this[0];\n        a[o + 1] = this[1];\n        a[o + 2] = this[2];\n        return a;\n    }\n}\n","import { Vec3 } from '../math/Vec3.js';\nimport { Quat } from '../math/Quat.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Euler } from '../math/Euler.js';\n\nexport class Transform {\n    constructor() {\n        this.parent = null;\n        this.children = [];\n        this.visible = true;\n\n        this.matrix = new Mat4();\n        this.worldMatrix = new Mat4();\n        this.matrixAutoUpdate = true;\n\n        this.position = new Vec3();\n        this.quaternion = new Quat();\n        this.scale = new Vec3(1);\n        this.rotation = new Euler();\n        this.up = new Vec3(0, 1, 0);\n\n        this.rotation.onChange = () => this.quaternion.fromEuler(this.rotation);\n        this.quaternion.onChange = () => this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    setParent(parent, notifyParent = true) {\n        if (this.parent && parent !== this.parent) this.parent.removeChild(this, false);\n        this.parent = parent;\n        if (notifyParent && parent) parent.addChild(this, false);\n    }\n\n    addChild(child, notifyChild = true) {\n        if (!~this.children.indexOf(child)) this.children.push(child);\n        if (notifyChild) child.setParent(this, false);\n    }\n\n    removeChild(child, notifyChild = true) {\n        if (!!~this.children.indexOf(child)) this.children.splice(this.children.indexOf(child), 1);\n        if (notifyChild) child.setParent(null, false);\n    }\n\n    updateMatrixWorld(force) {\n        if (this.matrixAutoUpdate) this.updateMatrix();\n        if (this.worldMatrixNeedsUpdate || force) {\n            if (this.parent === null) this.worldMatrix.copy(this.matrix);\n            else this.worldMatrix.multiply(this.parent.worldMatrix, this.matrix);\n            this.worldMatrixNeedsUpdate = false;\n            force = true;\n        }\n\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].updateMatrixWorld(force);\n        }\n    }\n\n    updateMatrix() {\n        this.matrix.compose(this.quaternion, this.position, this.scale);\n        this.worldMatrixNeedsUpdate = true;\n    }\n\n    traverse(callback) {\n        // Return true in callback to stop traversing children\n        if (callback(this)) return;\n        for (let i = 0, l = this.children.length; i < l; i++) {\n            this.children[i].traverse(callback);\n        }\n    }\n\n    decompose() {\n        this.matrix.getTranslation(this.position);\n        this.matrix.getRotation(this.quaternion);\n        this.matrix.getScaling(this.scale);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n\n    lookAt(target, invert = false) {\n        if (invert) this.matrix.lookAt(this.position, target, this.up);\n        else this.matrix.lookAt(target, this.position, this.up);\n        this.matrix.getRotation(this.quaternion);\n        this.rotation.fromQuaternion(this.quaternion);\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat4 } from '../math/Mat4.js';\nimport { Vec3 } from '../math/Vec3.js';\n\nconst tempMat4 = new Mat4();\nconst tempVec3a = new Vec3();\nconst tempVec3b = new Vec3();\n\nexport class Camera extends Transform {\n    constructor(gl, { near = 0.1, far = 100, fov = 45, aspect = 1, left, right, bottom, top, zoom = 1 } = {}) {\n        super();\n\n        Object.assign(this, { near, far, fov, aspect, left, right, bottom, top, zoom });\n\n        this.projectionMatrix = new Mat4();\n        this.viewMatrix = new Mat4();\n        this.projectionViewMatrix = new Mat4();\n        this.worldPosition = new Vec3();\n\n        // Use orthographic if left/right set, else default to perspective camera\n        this.type = left || right ? 'orthographic' : 'perspective';\n\n        if (this.type === 'orthographic') this.orthographic();\n        else this.perspective();\n    }\n\n    perspective({ near = this.near, far = this.far, fov = this.fov, aspect = this.aspect } = {}) {\n        Object.assign(this, { near, far, fov, aspect });\n        this.projectionMatrix.fromPerspective({ fov: fov * (Math.PI / 180), aspect, near, far });\n        this.type = 'perspective';\n        return this;\n    }\n\n    orthographic({\n        near = this.near,\n        far = this.far,\n        left = this.left,\n        right = this.right,\n        bottom = this.bottom,\n        top = this.top,\n        zoom = this.zoom,\n    } = {}) {\n        Object.assign(this, { near, far, left, right, bottom, top, zoom });\n        left /= zoom;\n        right /= zoom;\n        bottom /= zoom;\n        top /= zoom;\n        this.projectionMatrix.fromOrthogonal({ left, right, bottom, top, near, far });\n        this.type = 'orthographic';\n        return this;\n    }\n\n    updateMatrixWorld() {\n        super.updateMatrixWorld();\n        this.viewMatrix.inverse(this.worldMatrix);\n        this.worldMatrix.getTranslation(this.worldPosition);\n\n        // used for sorting\n        this.projectionViewMatrix.multiply(this.projectionMatrix, this.viewMatrix);\n        return this;\n    }\n\n    lookAt(target) {\n        super.lookAt(target, true);\n        return this;\n    }\n\n    // Project 3D coordinate to 2D point\n    project(v) {\n        v.applyMatrix4(this.viewMatrix);\n        v.applyMatrix4(this.projectionMatrix);\n        return this;\n    }\n\n    // Unproject 2D point to 3D coordinate\n    unproject(v) {\n        v.applyMatrix4(tempMat4.inverse(this.projectionMatrix));\n        v.applyMatrix4(this.worldMatrix);\n        return this;\n    }\n\n    updateFrustum() {\n        if (!this.frustum) {\n            this.frustum = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];\n        }\n\n        const m = this.projectionViewMatrix;\n        this.frustum[0].set(m[3] - m[0], m[7] - m[4], m[11] - m[8]).constant = m[15] - m[12]; // -x\n        this.frustum[1].set(m[3] + m[0], m[7] + m[4], m[11] + m[8]).constant = m[15] + m[12]; // +x\n        this.frustum[2].set(m[3] + m[1], m[7] + m[5], m[11] + m[9]).constant = m[15] + m[13]; // +y\n        this.frustum[3].set(m[3] - m[1], m[7] - m[5], m[11] - m[9]).constant = m[15] - m[13]; // -y\n        this.frustum[4].set(m[3] - m[2], m[7] - m[6], m[11] - m[10]).constant = m[15] - m[14]; // +z (far)\n        this.frustum[5].set(m[3] + m[2], m[7] + m[6], m[11] + m[10]).constant = m[15] + m[14]; // -z (near)\n\n        for (let i = 0; i < 6; i++) {\n            const invLen = 1.0 / this.frustum[i].distance();\n            this.frustum[i].multiply(invLen);\n            this.frustum[i].constant *= invLen;\n        }\n    }\n\n    frustumIntersectsMesh(node) {\n        // If no position attribute, treat as frustumCulled false\n        if (!node.geometry.attributes.position) return true;\n\n        if (!node.geometry.bounds || node.geometry.bounds.radius === Infinity) node.geometry.computeBoundingSphere();\n\n        if (!node.geometry.bounds) return true;\n\n        const center = tempVec3a;\n        center.copy(node.geometry.bounds.center);\n        center.applyMatrix4(node.worldMatrix);\n\n        const radius = node.geometry.bounds.radius * node.worldMatrix.getMaxScaleOnAxis();\n\n        return this.frustumIntersectsSphere(center, radius);\n    }\n\n    frustumIntersectsSphere(center, radius) {\n        const normal = tempVec3b;\n\n        for (let i = 0; i < 6; i++) {\n            const plane = this.frustum[i];\n            const distance = normal.copy(plane).dot(center) + plane.constant;\n            if (distance < -radius) return false;\n        }\n        return true;\n    }\n}\n","const EPSILON = 0.000001;\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nexport function fromMat4(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[4];\n    out[4] = a[5];\n    out[5] = a[6];\n    out[6] = a[8];\n    out[7] = a[9];\n    out[8] = a[10];\n    return out;\n}\n\n/**\n * Calculates a 3x3 matrix from the given quaternion\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat3} out\n */\nexport function fromQuat(out, q) {\n    let x = q[0],\n        y = q[1],\n        z = q[2],\n        w = q[3];\n    let x2 = x + x;\n    let y2 = y + y;\n    let z2 = z + z;\n\n    let xx = x * x2;\n    let yx = y * x2;\n    let yy = y * y2;\n    let zx = z * x2;\n    let zy = z * y2;\n    let zz = z * z2;\n    let wx = w * x2;\n    let wy = w * y2;\n    let wz = w * z2;\n\n    out[0] = 1 - yy - zz;\n    out[3] = yx - wz;\n    out[6] = zx + wy;\n\n    out[1] = yx + wz;\n    out[4] = 1 - xx - zz;\n    out[7] = zy - wx;\n\n    out[2] = zx - wy;\n    out[5] = zy + wx;\n    out[8] = 1 - xx - yy;\n\n    return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function copy(out, a) {\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n    out[0] = m00;\n    out[1] = m01;\n    out[2] = m02;\n    out[3] = m10;\n    out[4] = m11;\n    out[5] = m12;\n    out[6] = m20;\n    out[7] = m21;\n    out[8] = m22;\n    return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nexport function identity(out) {\n    out[0] = 1;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 1;\n    out[5] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function transpose(out, a) {\n    // If we are transposing ourselves we can skip a few steps but have to cache some values\n    if (out === a) {\n        let a01 = a[1],\n            a02 = a[2],\n            a12 = a[5];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a01;\n        out[5] = a[7];\n        out[6] = a02;\n        out[7] = a12;\n    } else {\n        out[0] = a[0];\n        out[1] = a[3];\n        out[2] = a[6];\n        out[3] = a[1];\n        out[4] = a[4];\n        out[5] = a[7];\n        out[6] = a[2];\n        out[7] = a[5];\n        out[8] = a[8];\n    }\n\n    return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nexport function invert(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b01 = a22 * a11 - a12 * a21;\n    let b11 = -a22 * a10 + a12 * a20;\n    let b21 = a21 * a10 - a11 * a20;\n\n    // Calculate the determinant\n    let det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = b01 * det;\n    out[1] = (-a22 * a01 + a02 * a21) * det;\n    out[2] = (a12 * a01 - a02 * a11) * det;\n    out[3] = b11 * det;\n    out[4] = (a22 * a00 - a02 * a20) * det;\n    out[5] = (-a12 * a00 + a02 * a10) * det;\n    out[6] = b21 * det;\n    out[7] = (-a21 * a00 + a01 * a20) * det;\n    out[8] = (a11 * a00 - a01 * a10) * det;\n    return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function multiply(out, a, b) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2];\n    let a10 = a[3],\n        a11 = a[4],\n        a12 = a[5];\n    let a20 = a[6],\n        a21 = a[7],\n        a22 = a[8];\n\n    let b00 = b[0],\n        b01 = b[1],\n        b02 = b[2];\n    let b10 = b[3],\n        b11 = b[4],\n        b12 = b[5];\n    let b20 = b[6],\n        b21 = b[7],\n        b22 = b[8];\n\n    out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n    out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n    out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n    out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n    out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n    out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n    out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n    out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n    out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n    return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nexport function translate(out, a, v) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        x = v[0],\n        y = v[1];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n\n    out[3] = a10;\n    out[4] = a11;\n    out[5] = a12;\n\n    out[6] = x * a00 + y * a10 + a20;\n    out[7] = x * a01 + y * a11 + a21;\n    out[8] = x * a02 + y * a12 + a22;\n    return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nexport function rotate(out, a, rad) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a10 = a[3],\n        a11 = a[4],\n        a12 = a[5],\n        a20 = a[6],\n        a21 = a[7],\n        a22 = a[8],\n        s = Math.sin(rad),\n        c = Math.cos(rad);\n\n    out[0] = c * a00 + s * a10;\n    out[1] = c * a01 + s * a11;\n    out[2] = c * a02 + s * a12;\n\n    out[3] = c * a10 - s * a00;\n    out[4] = c * a11 - s * a01;\n    out[5] = c * a12 - s * a02;\n\n    out[6] = a20;\n    out[7] = a21;\n    out[8] = a22;\n    return out;\n}\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nexport function scale(out, a, v) {\n    let x = v[0],\n        y = v[1];\n\n    out[0] = x * a[0];\n    out[1] = x * a[1];\n    out[2] = x * a[2];\n\n    out[3] = y * a[3];\n    out[4] = y * a[4];\n    out[5] = y * a[5];\n\n    out[6] = a[6];\n    out[7] = a[7];\n    out[8] = a[8];\n    return out;\n}\n\n/**\n * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {mat4} a Mat4 to derive the normal matrix from\n *\n * @returns {mat3} out\n */\nexport function normalFromMat4(out, a) {\n    let a00 = a[0],\n        a01 = a[1],\n        a02 = a[2],\n        a03 = a[3];\n    let a10 = a[4],\n        a11 = a[5],\n        a12 = a[6],\n        a13 = a[7];\n    let a20 = a[8],\n        a21 = a[9],\n        a22 = a[10],\n        a23 = a[11];\n    let a30 = a[12],\n        a31 = a[13],\n        a32 = a[14],\n        a33 = a[15];\n\n    let b00 = a00 * a11 - a01 * a10;\n    let b01 = a00 * a12 - a02 * a10;\n    let b02 = a00 * a13 - a03 * a10;\n    let b03 = a01 * a12 - a02 * a11;\n    let b04 = a01 * a13 - a03 * a11;\n    let b05 = a02 * a13 - a03 * a12;\n    let b06 = a20 * a31 - a21 * a30;\n    let b07 = a20 * a32 - a22 * a30;\n    let b08 = a20 * a33 - a23 * a30;\n    let b09 = a21 * a32 - a22 * a31;\n    let b10 = a21 * a33 - a23 * a31;\n    let b11 = a22 * a33 - a23 * a32;\n\n    // Calculate the determinant\n    let det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    if (!det) {\n        return null;\n    }\n    det = 1.0 / det;\n\n    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n    return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nexport function projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function add(out, a, b) {\n    out[0] = a[0] + b[0];\n    out[1] = a[1] + b[1];\n    out[2] = a[2] + b[2];\n    out[3] = a[3] + b[3];\n    out[4] = a[4] + b[4];\n    out[5] = a[5] + b[5];\n    out[6] = a[6] + b[6];\n    out[7] = a[7] + b[7];\n    out[8] = a[8] + b[8];\n    return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nexport function subtract(out, a, b) {\n    out[0] = a[0] - b[0];\n    out[1] = a[1] - b[1];\n    out[2] = a[2] - b[2];\n    out[3] = a[3] - b[3];\n    out[4] = a[4] - b[4];\n    out[5] = a[5] - b[5];\n    out[6] = a[6] - b[6];\n    out[7] = a[7] - b[7];\n    out[8] = a[8] - b[8];\n    return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nexport function multiplyScalar(out, a, b) {\n    out[0] = a[0] * b;\n    out[1] = a[1] * b;\n    out[2] = a[2] * b;\n    out[3] = a[3] * b;\n    out[4] = a[4] * b;\n    out[5] = a[5] * b;\n    out[6] = a[6] * b;\n    out[7] = a[7] * b;\n    out[8] = a[8] * b;\n    return out;\n}\n","import * as Mat3Func from './functions/Mat3Func.js';\n\nexport class Mat3 extends Array {\n    constructor(m00 = 1, m01 = 0, m02 = 0, m10 = 0, m11 = 1, m12 = 0, m20 = 0, m21 = 0, m22 = 1) {\n        super(m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    set(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n        if (m00.length) return this.copy(m00);\n        Mat3Func.set(this, m00, m01, m02, m10, m11, m12, m20, m21, m22);\n        return this;\n    }\n\n    translate(v, m = this) {\n        Mat3Func.translate(this, m, v);\n        return this;\n    }\n\n    rotate(v, m = this) {\n        Mat3Func.rotate(this, m, v);\n        return this;\n    }\n\n    scale(v, m = this) {\n        Mat3Func.scale(this, m, v);\n        return this;\n    }\n\n    multiply(ma, mb) {\n        if (mb) {\n            Mat3Func.multiply(this, ma, mb);\n        } else {\n            Mat3Func.multiply(this, this, ma);\n        }\n        return this;\n    }\n\n    identity() {\n        Mat3Func.identity(this);\n        return this;\n    }\n\n    copy(m) {\n        Mat3Func.copy(this, m);\n        return this;\n    }\n\n    fromMatrix4(m) {\n        Mat3Func.fromMat4(this, m);\n        return this;\n    }\n\n    fromQuaternion(q) {\n        Mat3Func.fromQuat(this, q);\n        return this;\n    }\n\n    fromBasis(vec3a, vec3b, vec3c) {\n        this.set(vec3a[0], vec3a[1], vec3a[2], vec3b[0], vec3b[1], vec3b[2], vec3c[0], vec3c[1], vec3c[2]);\n        return this;\n    }\n\n    inverse(m = this) {\n        Mat3Func.invert(this, m);\n        return this;\n    }\n\n    getNormalMatrix(m) {\n        Mat3Func.normalFromMat4(this, m);\n        return this;\n    }\n}\n","import { Transform } from './Transform.js';\nimport { Mat3 } from '../math/Mat3.js';\nimport { Mat4 } from '../math/Mat4.js';\n\nlet ID = 0;\n\nexport class Mesh extends Transform {\n    constructor(gl, { geometry, program, mode = gl.TRIANGLES, frustumCulled = true, renderOrder = 0 } = {}) {\n        super();\n        if (!gl.canvas) console.error('gl not passed as first argument to Mesh');\n        this.gl = gl;\n        this.id = ID++;\n        this.geometry = geometry;\n        this.program = program;\n        this.mode = mode;\n\n        // Used to skip frustum culling\n        this.frustumCulled = frustumCulled;\n\n        // Override sorting to force an order\n        this.renderOrder = renderOrder;\n        this.modelViewMatrix = new Mat4();\n        this.normalMatrix = new Mat3();\n        this.beforeRenderCallbacks = [];\n        this.afterRenderCallbacks = [];\n    }\n\n    onBeforeRender(f) {\n        this.beforeRenderCallbacks.push(f);\n        return this;\n    }\n\n    onAfterRender(f) {\n        this.afterRenderCallbacks.push(f);\n        return this;\n    }\n\n    draw({ camera } = {}) {\n        this.beforeRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n        if (camera) {\n            // Add empty matrix uniforms to program if unset\n            if (!this.program.uniforms.modelMatrix) {\n                Object.assign(this.program.uniforms, {\n                    modelMatrix: { value: null },\n                    viewMatrix: { value: null },\n                    modelViewMatrix: { value: null },\n                    normalMatrix: { value: null },\n                    projectionMatrix: { value: null },\n                    cameraPosition: { value: null },\n                });\n            }\n\n            // Set the matrix uniforms\n            this.program.uniforms.projectionMatrix.value = camera.projectionMatrix;\n            this.program.uniforms.cameraPosition.value = camera.worldPosition;\n            this.program.uniforms.viewMatrix.value = camera.viewMatrix;\n            this.modelViewMatrix.multiply(camera.viewMatrix, this.worldMatrix);\n            this.normalMatrix.getNormalMatrix(this.modelViewMatrix);\n            this.program.uniforms.modelMatrix.value = this.worldMatrix;\n            this.program.uniforms.modelViewMatrix.value = this.modelViewMatrix;\n            this.program.uniforms.normalMatrix.value = this.normalMatrix;\n        }\n\n        // determine if faces need to be flipped - when mesh scaled negatively\n        let flipFaces = this.program.cullFace && this.worldMatrix.determinant() < 0;\n        this.program.use({ flipFaces });\n        this.geometry.draw({ mode: this.mode, program: this.program });\n        this.afterRenderCallbacks.forEach((f) => f && f({ mesh: this, camera }));\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\n\nexport class Plane extends Geometry {\n    constructor(gl, { width = 1, height = 1, widthSegments = 1, heightSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n\n        // Determine length of arrays\n        const num = (wSegs + 1) * (hSegs + 1);\n        const numIndices = wSegs * hSegs * 6;\n\n        // Generate empty arrays once\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = numIndices > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        Plane.buildPlane(position, normal, uv, index, width, height, 0, wSegs, hSegs);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n\n    static buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, u = 0, v = 1, w = 2, uDir = 1, vDir = -1, i = 0, ii = 0) {\n        const io = i;\n        const segW = width / wSegs;\n        const segH = height / hSegs;\n\n        for (let iy = 0; iy <= hSegs; iy++) {\n            let y = iy * segH - height / 2;\n            for (let ix = 0; ix <= wSegs; ix++, i++) {\n                let x = ix * segW - width / 2;\n\n                position[i * 3 + u] = x * uDir;\n                position[i * 3 + v] = y * vDir;\n                position[i * 3 + w] = depth / 2;\n\n                normal[i * 3 + u] = 0;\n                normal[i * 3 + v] = 0;\n                normal[i * 3 + w] = depth >= 0 ? 1 : -1;\n\n                uv[i * 2] = ix / wSegs;\n                uv[i * 2 + 1] = 1 - iy / hSegs;\n\n                if (iy === hSegs || ix === wSegs) continue;\n                let a = io + ix + iy * (wSegs + 1);\n                let b = io + ix + (iy + 1) * (wSegs + 1);\n                let c = io + ix + (iy + 1) * (wSegs + 1) + 1;\n                let d = io + ix + iy * (wSegs + 1) + 1;\n\n                index[ii * 6] = a;\n                index[ii * 6 + 1] = b;\n                index[ii * 6 + 2] = d;\n                index[ii * 6 + 3] = b;\n                index[ii * 6 + 4] = c;\n                index[ii * 6 + 5] = d;\n                ii++;\n            }\n        }\n    }\n}\n","import { Geometry } from '../core/Geometry.js';\nimport { Plane } from './Plane.js';\n\nexport class Box extends Geometry {\n    constructor(gl, { width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1, attributes = {} } = {}) {\n        const wSegs = widthSegments;\n        const hSegs = heightSegments;\n        const dSegs = depthSegments;\n\n        const num = (wSegs + 1) * (hSegs + 1) * 2 + (wSegs + 1) * (dSegs + 1) * 2 + (hSegs + 1) * (dSegs + 1) * 2;\n        const numIndices = (wSegs * hSegs * 2 + wSegs * dSegs * 2 + hSegs * dSegs * 2) * 6;\n\n        const position = new Float32Array(num * 3);\n        const normal = new Float32Array(num * 3);\n        const uv = new Float32Array(num * 2);\n        const index = num > 65536 ? new Uint32Array(numIndices) : new Uint16Array(numIndices);\n\n        let i = 0;\n        let ii = 0;\n\n        // left, right\n        Plane.buildPlane(position, normal, uv, index, depth, height, width, dSegs, hSegs, 2, 1, 0, -1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        Plane.buildPlane(position, normal, uv, index, depth, height, -width, dSegs, hSegs, 2, 1, 0, 1, -1, i, ii);\n        i += (dSegs + 1) * (hSegs + 1);\n        ii += dSegs * hSegs;\n\n        // top, bottom\n        Plane.buildPlane(position, normal, uv, index, width, depth, height, dSegs, wSegs, 0, 2, 1, 1, 1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        Plane.buildPlane(position, normal, uv, index, width, depth, -height, dSegs, wSegs, 0, 2, 1, 1, -1, i, ii);\n        i += (wSegs + 1) * (dSegs + 1);\n        ii += wSegs * dSegs;\n\n        // front, back\n        Plane.buildPlane(position, normal, uv, index, width, height, -depth, wSegs, hSegs, 0, 1, 2, -1, -1, i, ii);\n        i += (wSegs + 1) * (hSegs + 1);\n        ii += wSegs * hSegs;\n\n        Plane.buildPlane(position, normal, uv, index, width, height, depth, wSegs, hSegs, 0, 1, 2, 1, -1, i, ii);\n\n        Object.assign(attributes, {\n            position: { size: 3, data: position },\n            normal: { size: 3, data: normal },\n            uv: { size: 2, data: uv },\n            index: { data: index },\n        });\n\n        super(gl, attributes);\n    }\n}\n","\n\nimport { Renderer, Camera, Transform, Program, Mesh, Box } from 'ogl'\n\n\n\nexport default class Stage {\n    constructor() {\n        //methots\n        this.createRenderer()\n        this.createCamera()\n        this.createScene()\n        \n        this.onResize()\n        this.createGeo()\n        this.update()\n        this.addEventListeners()\n    }\n\n    createRenderer() {\n        this.renderer = new Renderer()\n\n        this.gl = this.renderer.gl\n        this.gl.clearColor(0.945, 0.945, 0.945, 0.1);\n\n        document.body.appendChild(this.gl.canvas)\n    }\n    createCamera() {\n        this.camera = new Camera(this.gl)\n        this.camera.fov = 35\n        this.camera.position.set(0, 1, 7);\n        //this.camera.position.z = 7\n    }\n    createScene() {\n        this.scene = new Transform()\n    }\n    \n    createGeo() {\n\n        // Let's use the Box helper from OGL\n        const geometry = new Box(this.gl);\n        const program = new Program(this.gl, {\n            vertex: /* glsl */ `\n            attribute vec2 uv;\n            attribute vec3 position;\n            uniform mat4 modelViewMatrix;\n            uniform mat4 projectionMatrix;\n            varying vec2 vUv;\n            void main() {\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `,\n            fragment: /* glsl */ `\n        precision highp float;\n        uniform float uTime;\n        uniform vec3 uColor;\n        varying vec2 vUv;\n        void main() {\n            gl_FragColor.rgb = 0.3 + .5 * cos(vUv.xyx + uTime) + uColor;\n            gl_FragColor.a = 1.0;\n        }\n    `,\n            uniforms: {\n                uTime: { value: 0 },\n            }\n        });\n\n        const mesh = new Mesh(this.gl, { geometry, program });\n\n        // And finally we add it to the scene\n        mesh.setParent(this.scene);\n    }\n    /**\n   * Events.\n   */\n\n    /**\n * Resize.\n */\n    onResize() {\n        this.screen = {\n            height: window.innerHeight,\n            width: window.innerWidth\n        }\n\n        this.renderer.setSize(this.screen.width, this.screen.height)\n\n        this.camera.perspective({\n            aspect: this.gl.canvas.width / this.gl.canvas.height\n        })\n\n    }\n    update() {\n        this.renderer.render({\n            scene: this.scene,\n            camera: this.camera\n        })\n\n        window.requestAnimationFrame(this.update.bind(this))\n    }\n    addEventListeners() {\n        window.addEventListener('resize', this.onResize.bind(this))\n    }\n}","\nimport \"./style/main.scss\";\n//  import lines from \"./js/follow\";\nimport GUIView from \"./js/app\";\nimport Stage from './js/Stage';\n// import thingA from \"./js/thingA\";\n\n\t\nconst app = () => {\n\tlet stage = new Stage();\n\n\tlet ui = new GUIView();\n\tui.init();\n\t//let thing = new thingA( {scene:'stateA', active: true} );\n\t//let thing = new thingA();\n\t//\t\tthing.draw()\n\t// lines();\n\n};\n\nwindow.onload = (event) => {\n\tapp();\n};\n"],"names":["copy","normalize","dot","Vec3Func.set","Vec3Func.copy","Vec3Func.add","Vec3Func.subtract","Vec3Func.multiply","Vec3Func.scale","Vec3Func.divide","Vec3Func.inverse","Vec3Func.length","Vec3Func.distance","Vec3Func.squaredLength","Vec3Func.squaredDistance","Vec3Func.negate","Vec3Func.cross","Vec3Func.normalize","Vec3Func.dot","Vec3Func.exactEquals","Vec3Func.transformMat3","Vec3Func.transformMat4","Vec3Func.scaleRotateMat4","Vec3Func.transformQuat","Vec3Func.angle","Vec3Func.lerp","tempVec3","ID","vec4.copy","set","vec4.set","vec4.dot","vec4.normalize","QuatFunc.identity","QuatFunc.set","QuatFunc.rotateX","QuatFunc.rotateY","QuatFunc.rotateZ","QuatFunc.invert","QuatFunc.conjugate","QuatFunc.copy","QuatFunc.normalize","QuatFunc.multiply","QuatFunc.dot","QuatFunc.fromMat3","QuatFunc.fromEuler","QuatFunc.setAxisAngle","QuatFunc.slerp","Mat4Func.set","Mat4Func.translate","Mat4Func.rotate","Mat4Func.scale","Mat4Func.multiply","Mat4Func.identity","Mat4Func.copy","Mat4Func.perspective","Mat4Func.ortho","Mat4Func.fromQuat","Mat4Func.invert","Mat4Func.fromRotationTranslationScale","Mat4Func.getRotation","Mat4Func.getTranslation","Mat4Func.getScaling","Mat4Func.getMaxScaleOnAxis","Mat4Func.targetTo","Mat4Func.determinant","EulerFunc.fromRotationMatrix","Mat3Func.set","Mat3Func.translate","Mat3Func.rotate","Mat3Func.scale","Mat3Func.multiply","Mat3Func.identity","Mat3Func.copy","Mat3Func.fromMat4","Mat3Func.fromQuat","Mat3Func.invert","Mat3Func.normalFromMat4","Stage"],"mappings":"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"}